<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/8/2024 10:31:28 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="RUSSELLASUS"
  DTS:CreatorName="RUSSELLASUS\russell.n.donnelly"
  DTS:DTSID="{13CE58FD-6898-4217-9B29-8E9569B453FE}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5397.1"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="167"
  DTS:VersionGUID="{786B4D2C-F126-4B20-9AB4-F72A5C4F604D}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">14,7,OnError,19,OnExecStatusChanged,13,OnInformation,13,OnPostExecute,14,OnPostValidate,12,OnPreExecute,13,OnPreValidate,10,OnProgress,13,OnQueryCancel,12,OnTaskFailed,22,OnVariableValueChanged,9,OnWarning,10,Diagnostic,12,DiagnosticEx</DTS:Property>
    <DTS:Property
      DTS:EventName="Diagnostic"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="DiagnosticEx"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnExecStatusChanged"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnInformation"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPostExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPostValidate"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPreExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPreValidate"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnProgress"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnQueryCancel"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnTaskFailed"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnVariableValueChanged"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnWarning"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\sftp_send_receive"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{DA114437-EABD-4F35-A824-A2B12E0885A0}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="sftp_send_receive"
      DTS:ThreadHint="0">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{8552D115-7669-4AA0-8A13-A2DD2D381DA1}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="bufferSize">
          <DTS:VariableValue
            DTS:DataType="3">4096</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{D2F70FD1-81E8-49E5-8702-993B5F8FBE45}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="canOverride">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{C950B81B-F8AA-4E1E-913A-1468B6593CD6}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="doDelete">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{7C8FD6FC-82EE-4850-98E2-E1C14647F158}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="filePattern">
          <DTS:VariableValue
            DTS:DataType="8">*.*</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{73BE7454-8A03-426C-82F3-807FC572518B}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="hostAddress">
          <DTS:VariableValue
            DTS:DataType="8">eu-central-1.sftpcloud.io</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{FA67A102-B75D-4C8A-A1E8-02B29875A3E8}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="hostPath">
          <DTS:VariableValue
            DTS:DataType="8">/sftptransfer</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{211A2D17-BDA9-408F-85B4-10879E35CF80}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="isReceive">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{73B422CA-8581-4865-8038-D2DEE171D490}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="keepAliveInterval">
          <DTS:VariableValue
            DTS:DataType="3">60</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{8B360DEC-A112-4737-B9C5-FE67D0876DEE}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="localPath">
          <DTS:VariableValue
            DTS:DataType="8">C:\sftptransfer</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{FDBB6FF1-3EE8-4DDB-A61C-20F6D37BE9F5}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="logFilePath">
          <DTS:VariableValue
            DTS:DataType="8">C:\sftplogging\logging.txt</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{6E43F045-A26F-4BAA-804F-88BBD5AC4B0F}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="passWord">
          <DTS:VariableValue
            DTS:DataType="8">5PkkPHEHONbDtlCqqfgctLyxz1TgNKvR</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{9EEA175E-9709-4478-A518-A5D174B57D4E}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="port">
          <DTS:VariableValue
            DTS:DataType="3">22</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{7A55E8D7-9A92-4D0F-8077-F1D7F05B15C2}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="privateKeyFile">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{62661762-ADE3-45DD-867A-E8E947A34F49}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="userName">
          <DTS:VariableValue
            DTS:DataType="8">cd9d5271f9974121bd62e9b6db00265e</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:LoggingOptions
        DTS:FilterKind="0"
        DTS:LoggingMode="1">
        <DTS:Property
          DTS:DataType="8"
          DTS:Name="EventFilter">1,7,OnError</DTS:Property>
        <DTS:Property
          DTS:EventName="OnError"
          DTS:Name="ColumnFilter">
          <DTS:Property
            DTS:Name="Computer">-1</DTS:Property>
          <DTS:Property
            DTS:Name="Operator">-1</DTS:Property>
          <DTS:Property
            DTS:Name="SourceName">-1</DTS:Property>
          <DTS:Property
            DTS:Name="SourceID">-1</DTS:Property>
          <DTS:Property
            DTS:Name="ExecutionID">-1</DTS:Property>
          <DTS:Property
            DTS:Name="MessageText">-1</DTS:Property>
          <DTS:Property
            DTS:Name="DataBytes">-1</DTS:Property>
        </DTS:Property>
      </DTS:LoggingOptions>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_d3b799b5e720451a94e08b19ba6086d4"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ExceptionProcess.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;

namespace ST_d3b799b5e720451a94e08b19ba6086d4
{
    //c# script copy within namespace
    //**************************************************
    public class ExceptionProcess
    {

        private readonly string ln = Environment.NewLine;
        public void ExceptionsService(Action action, bool writeToConsole, string logFilePath)
        {
            try
            {
                action.Invoke();
            }
            catch (AggregateException aggEx)
            {
                AggregateExceptionWrite(aggEx, writeToConsole, logFilePath);
            }
            catch (Exception ex)
            {
                ExceptionWrite(ex, writeToConsole, logFilePath);
            }
        }
        protected void AggregateExceptionWrite(AggregateException aggEx, bool writeToConsole, string logFilePath)
        {
            if (writeToConsole)
            {
                Console.WriteLine($"{ln}Exception(s):{ln}{aggEx.Message};{ln}");
            }
            IEnumerable<Exception> innerExceptions = aggEx.InnerExceptions;
            foreach (Exception inEx in innerExceptions)
            {
                if (writeToConsole)
                {
                    Console.WriteLine($"Following Inner Exception:{inEx.Message};");
                }
                //ILogger loggerfile = new FileLogger(logFilePath, 5);
                //loggerfile.LogInformation($"{inEx.Message}{ln};");
            }
        }
        protected void ExceptionWrite(Exception ex, bool writeToConsole, string logFilePath)
        {
            if (writeToConsole)
            {
                Console.WriteLine($"{ln}{ex.Message};");
            }
            //ILogger loggerfile = new FileLogger(logFilePath, 5);
            //loggerfile.LogInformation($"{ex.Message}{ln};");
        }
    }
    //c# script copy within namespace
    //**************************************************
}]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="System.Runtime.CompilerServices.Unsafe" version="4.5.3" targetFramework="net47" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Settings.get_Default():ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Sett" +
    "ings")]

namespace ST_d3b799b5e720451a94e08b19ba6086d4.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_d3b799b5e720451a94e08b19ba6086d4</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_d3b799b5e720451a94e08b19ba6086d4</msb:DisplayName>
    <msb:ProjectId>{7F6D251C-121F-49DB-A303-419A48D4764A}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_d3b799b5e720451a94e08b19ba6086d4.csproj" />
    <msb:File Include="ILogger.cs" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="ExceptionProcess.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="SSISService.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="app.config" />
    <msb:File Include="packages.config" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="RenciService.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_d3b799b5e720451a94e08b19ba6086d4")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_d3b799b5e720451a94e08b19ba6086d4")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[//#define DEBUG
#define IN_SSIS

#region Namespaces
using System;
using Microsoft.SqlServer.Dts.Runtime;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading;
#endregion

namespace ST_d3b799b5e720451a94e08b19ba6086d4
{
    //**************************************************
    //c# script copy to vs, start under namespace to keep namespace in the project

    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        private readonly string ln = Environment.NewLine;
        private string logFilePath = @"C:\sftplogging\logging.txt";

        private string hostAddress = "eu-central-1.sftpcloud.io";
        private string hostPath = "/sftptransfer";
        private string filePattern = "*.*";
        private string userName = "fd01906ad5644cd99d222b6dd32e651d";
        private string passWord = "n8QPtntYrinTEPxg6wKmyVpwU05i6NCe";
        private string localPath = @"C:\sftptransfer";
        private int port = 22;
        private bool isReceive = true;
        private string privateKeyFile = "";
        private bool doDelete = true;
        private bool canOverride = true;
        private int keepAliveInterval = 60;
        private int bufferSize = 4096;

        public void Main()
        {
            try
            {
#if IN_SSIS
                SSISService sSISS = new SSISService();
                hostAddress = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::hostAddress").ToString();
                hostPath = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::hostPath").ToString();
                filePattern = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::filePattern").ToString();
                userName = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::userName").ToString();
                passWord = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::passWord").ToString();
                localPath = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::localPath").ToString();
                port = (int)sSISS.ReadVariable(Dts.VariableDispenser, "User::port");
                isReceive = (bool)sSISS.ReadVariable(Dts.VariableDispenser, "User::isReceive");
                logFilePath = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::logFilePath");
                privateKeyFile = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::privateKeyFile").ToString();
                doDelete = (bool)sSISS.ReadVariable(Dts.VariableDispenser, "User::doDelete");
                canOverride = (bool)sSISS.ReadVariable(Dts.VariableDispenser, "User::canOverride");
                keepAliveInterval = (int)sSISS.ReadVariable(Dts.VariableDispenser, "User::keepAliveInterval");
                bufferSize = (int)sSISS.ReadVariable(Dts.VariableDispenser, "User::bufferSize");
#endif
                string message = string.Format($"{ln}filePattern:{filePattern}, {ln}hostAddress:{hostAddress}, {ln}passWord:{passWord}," +
                $"{ln}hostPath:{hostPath}, {ln}userName:{userName}, {ln}localPath:{localPath}, {ln}port:{port}," +
                $"{ln}isReceive:{isReceive}, {ln}privateKeyFile:{privateKeyFile}, {ln}doDelete:{doDelete}," +
                $"{ln}canOverride:{canOverride},{ln}keepAliveInterval:{keepAliveInterval},{ln}bufferSize:{bufferSize},{ln}logFilePath:{logFilePath}");
#if DEBUG
                Console.WriteLine(message);
#endif
#if IN_SSIS
#if DEBUG
                ILogger loggerssis = new FileLogger((string)sSISS.ReadVariable(Dts.VariableDispenser, "User::logFilePath").ToString(), 5);
                loggerssis.LogInformation(message);
                bool fireAgain = false;
                Dts.Events.FireInformation(0, "", message, string.Empty, helpContext: 0, ref fireAgain);
#endif
#endif
                RenciService.GetService
                (
                    _hostAddress: hostAddress
                    , _hostPath: hostPath
                    , _filePattern: filePattern
                    , _userName: userName
                    , _passWord: passWord
                    , _localPath: localPath
                    , _port: port
                    , _isReceive: isReceive
                    , _logFilePath: logFilePath
                    , _privateKeyFile: privateKeyFile
                    , _doDelete: doDelete
                    , _canOverride: canOverride
                    , _keepAliveInterval: keepAliveInterval
                    , _bufferSize: bufferSize

                );
            }
            catch (AggregateException exs)
            {
                ExceptionProcess eh = new ExceptionProcess();
#if DEBUG
                eh.ExceptionsService(() => { throw exs; }, true, logFilePath);
#else
                eh.ExceptionsService(() => { throw exs; }, false, logFilePath);
#endif
#if IN_SSIS
                SSISService sSISS = new SSISService();
                string taskName = (string)sSISS.ReadVariable(Dts.VariableDispenser, "System::TaskName").ToString();
                ILogger loggerssis = new FileLogger((string)sSISS.ReadVariable(Dts.VariableDispenser, "User::logFilePath").ToString(), 5);
                loggerssis.LogInformation($"{taskName}:{ln}{exs.Message};{ln}");
#endif
#if IN_SSIS
                Dts.Events.FireError(0, taskName, exs.Message, string.Empty, helpContext: 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
#endif
            }
            catch (Exception ex)
            {
                ExceptionProcess eh = new ExceptionProcess();
#if DEBUG
                eh.ExceptionsService(() => { throw ex; }, true, logFilePath);
#else
                //eh.ExceptionsService(() => { throw ex; }, false, logFilePath);
#endif
#if IN_SSIS
                SSISService sSISS = new SSISService();
                string taskName = (string)sSISS.ReadVariable(Dts.VariableDispenser, "System::TaskName").ToString();
                ILogger loggerssis = new FileLogger((string)sSISS.ReadVariable(Dts.VariableDispenser, "User::logFilePath").ToString(), 5);
                loggerssis.LogInformation($"{taskName}:{ln}{ex.Message};{ln}");
#endif
#if IN_SSIS
                Dts.Events.FireError(0, taskName, ex.Message, string.Empty, helpContext: 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
#endif
            }
            finally
            {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                GC.WaitForFullGCComplete();
#if DEBUG
                Console.WriteLine($"{ln}finally statement reached");
                Console.ReadLine();
#endif
#if IN_SSIS
                Dts.TaskResult = (int)ScriptResults.Success;
#endif
            }
        }
#if IN_SSIS
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
#endif
    }
    //c# script copy within namespace
    //**************************************************
}]]></ProjectItem>
          <ProjectItem
            Name="ILogger.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.IO;
using System.Text;

namespace ST_d3b799b5e720451a94e08b19ba6086d4
{
    //c# script copy within namespace
    //**************************************************
    public interface ILogger
    {
        void LogInformation(string message);
        void LogWarning(string message);
        void LogError(string message);
    }
    public class FileLogger : ILogger
    {
        private readonly string _logFilePath;
        private readonly int _allocateBufferSize;
        private readonly int _keepDays;
        private readonly string ln = Environment.NewLine;

        public FileLogger(string logFilePath = "", int allocateBufferSize = 4096, int keepDays = 5)
        {
            _logFilePath = logFilePath;
            _allocateBufferSize = allocateBufferSize;
            _keepDays = keepDays;
        }

        public void LogInformation(string message)
        {
            LogMessageText("INFO", message);
        }

        public void LogWarning(string message)
        {
            LogMessageText("WARNING", message);
        }

        public void LogError(string message)
        {
            LogMessageText("ERROR", message);
        }

        private void LogMessageText(string logLevel, string message)
        {
            string logEntry = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] [{logLevel}] {message}{Environment.NewLine}";
            try
            {
                if (!String.IsNullOrEmpty(_logFilePath))        //ILogger will not try to log if null/empty
                {
                    DateTime lastWriteTime = File.GetLastWriteTime(_logFilePath);
                    var fileDirectory = Path.GetDirectoryName(_logFilePath);
                    if (!Directory.Exists(fileDirectory))
                    {
                        Directory.CreateDirectory(fileDirectory);
                    }

                    if ((!File.Exists(_logFilePath)))
                    {
                        StreamWriter sw = new StreamWriter(_logFilePath, false, Encoding.Unicode, _allocateBufferSize);
                        sw.Write(logEntry);
                        sw.Flush();
                        sw.Close();
                        sw.Dispose();
                    }
                    else if (DateTime.Now - lastWriteTime < TimeSpan.FromDays(_keepDays))
                    {
                        StreamWriter sw = new StreamWriter(_logFilePath, true, Encoding.Unicode, _allocateBufferSize);
                        sw.Write(logEntry);
                        sw.Flush();
                        sw.Close();
                        sw.Dispose();
                    }
                    else if (DateTime.Now - lastWriteTime >= TimeSpan.FromDays(_keepDays))
                    {
                        StreamWriter sw = new StreamWriter(_logFilePath, false, Encoding.Unicode, _allocateBufferSize);
                        sw.Write(logEntry);
                        sw.Flush();
                        sw.Close();
                        sw.Dispose();
                    }
                    else
                    {
                        //continue
                    }
                }
                else
                {
                    //continue
                }
            }
            catch (AggregateException exs)
            {
                throw new AggregateException($"{ln}at ILogger.LogMessageText;" +
                    $"{ln}AggregateException:{exs.Message};{ln}_logFilePath:{_logFilePath};{ln}logLevel:{logLevel};{ln}message:{message};{ln}{exs.Message};{ln}", exs.InnerExceptions);
            }
            catch (Exception ex)
            {
                throw new Exception($"{ln}at ILogger.LogMessageText;" +
                    $"{ln}Exception:{ex.Message};{ln}logLevel:{logLevel};{ln}message:{message};{ln}{ex.Message};{ln}", ex.InnerException);
            }
        }
    }
    //c# script copy within namespace
    //**************************************************
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_d3b799b5e720451a94e08b19ba6086d4.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_d3b799b5e720451a94e08b19ba6086d4.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{AA1E36C9-B502-4853-9F5F-42FA4116E20C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_d3b799b5e720451a94e08b19ba6086d4</RootNamespace>
    <AssemblyName>ST_d3b799b5e720451a94e08b19ba6086d4</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Renci.SshNet, Version=2024.0.0.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Renci.SshNet\v4.0_2020.0.2.0__1cee9f8bde3db106\Renci.SshNet.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Threading.Tasks.Extensions, Version=4.2.0.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>C:\Users\russell.n.donnelly\AppData\Local\Temp\Vsta\SSIS_ST160\VstamNtN9Btzc0OtPpPPSg__QXw\packages\System.Threading.Tasks.Extensions.4.5.4\lib\net461\System.Threading.Tasks.Extensions.dll</HintPath>
    </Reference>
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="ExceptionProcess.cs" />
    <Compile Include="ILogger.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="SSISService.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="app.config" />
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="RenciService.cs" />
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Connected Services\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="SSISService.cs"
            Encoding="UTF8"><![CDATA[using Microsoft.SqlServer.Dts.Runtime;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ST_d3b799b5e720451a94e08b19ba6086d4
{
    //c# script copy within namespace
    //**************************************************
    public partial class SSISService : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        private static string ln = Environment.NewLine;
        #region example WriteVariable
        /// <summary>        
        ///Example:  object myVarValue = "Abcd"; WriteVariable("User::MyVar", myVarValue);
        /// </summary>
        #endregion

        public static void WriteVariable(VariableDispenser varDisp, string varName, object varValue)
        {
            try
            {
                Variables vars = null;
                varDisp.LockForWrite(varName);
                varDisp.GetVariables(ref vars);
                vars[varName].Value = varValue;
                vars.Unlock();
            }
            catch (AggregateException exs)
            {
                throw new AggregateException(String.Format($"{ln}Exception SSISService.WriteVariable:{ln}{exs.Message};{ln}varName:{varName};{ln}varValue:{varValue};"), exs.InnerException);
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format($"{ln}Exception SSISService.WriteVariable:{ln}{ex.Message};{ln}varName:{varName};{ln}varValue:{varValue};"), ex.InnerException);
            }
        }

        #region example ReadVariable uncomment when moved to ssis script
        ///< summary >
        /// Example:  object myVarValue = ReadVariable("User::MyVar");
        ///</ summary >
        #endregion

        public object ReadVariable(VariableDispenser varDisp, string varName)
        {
            try
            {
                Variables vars = null;
                object result;
                varDisp.LockForRead(varName);
                varDisp.GetVariables(ref vars);
                result = vars[varName].Value;
                vars.Unlock();
                varDisp = null;
                return result;
            }
            catch { return null; }
        }
    }
    //c# script copy within namespace
    //**************************************************
}]]></ProjectItem>
          <ProjectItem
            Name="RenciService.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Renci.SshNet;
using Renci.SshNet.Sftp;
using Renci.SshNet.Common;


namespace ST_d3b799b5e720451a94e08b19ba6086d4
{
    //c# script copy within namespace
    //**************************************************
    public static class RenciService
    {
        private static readonly string ln = Environment.NewLine;
        private static Renci.SshNet.ConnectionInfo CreateConnectionInfo(string privateKeyFile, string hostAddress, int port, string userName, string passWord)
        {
            try
            {
                if (!string.IsNullOrEmpty(privateKeyFile))
                {
                    var keystream = new FileStream(privateKeyFile, FileMode.Open, FileAccess.Read);
                    return new Renci.SshNet.ConnectionInfo(host: hostAddress, port: port, username: userName,
                                                new[] { new PrivateKeyAuthenticationMethod(username: userName,
                                                        new PrivateKeyFile(privateKey: keystream, passPhrase: passWord)) });
                }
                else
                {
                    AuthenticationMethod authmethod = new PasswordAuthenticationMethod(username: userName, password: passWord);
                    return new Renci.SshNet.ConnectionInfo(host: hostAddress, port: port, username: userName, new[] { authmethod });
                }
            }
            catch (AggregateException exs)
            {
                throw new AggregateException($"{ln}Exception in RenciService.CreateConnectionInfo;{ln}privateKeyFile:{privateKeyFile};" +
                    $"{ln}hostAddress:{hostAddress};{ln}port:{port};{ln}username:{userName};{ln}password:{passWord};{ln}{exs.Message};{ln}", exs.InnerException);
            }
            catch (Exception ex)
            {
                throw new Exception($"{ln}Exception in RenciService.CreateConnectionInfo;{ln}privateKeyFile:{privateKeyFile};" +
                    $"{ln}hostAddress:{hostAddress};{ln}port:{port};{ln}username:{userName};{ln}password:{passWord};{ln}{ex.Message};{ln}", ex.InnerException);
            }
        }
        public static void GetService
            (
                string _hostAddress
                , string _hostPath
                , string _filePattern
                , string _userName
                , string _passWord
                , string _localPath
                , int _port
                , bool _isReceive
                , string _privateKeyFile = ""
                , bool _doDelete = true
                , bool _canOverride = true
                , long _keepAliveInterval = 60
                , int _bufferSize = 4096
                , string _logFilePath = @"c:\sftplogging\logging.txt"
            )
        {
            try
            {
                TimeSpan _keepaliveinterval = new TimeSpan(ticks: _keepAliveInterval);
                Renci.SshNet.ConnectionInfo conninfo = CreateConnectionInfo(_privateKeyFile, _hostAddress, _port, _userName, _passWord);
                AuthenticationMethod authmethod = new PasswordAuthenticationMethod(_userName, password: _passWord);
                SftpClient client = new SftpClient(conninfo)
                {
                    KeepAliveInterval = _keepaliveinterval
                };
                try
                {
                    client.Connect();
                }
                catch (Exception ex)
                {
                    string exMessage;
                    if (!client.IsConnected)
                    {
                        exMessage = $"{ln}Exception at RenciService.GetService;{ln}client.IsConnected returned false;" +
                            $"{ln}{ex.Message};{ln}_hostAddress:{_hostAddress};{ln}_port:{_port};{ln}_userName:{_userName};{ln}_passWord:{_passWord}{ln}";
                        throw new Exception(exMessage, ex.InnerException);
                    }
                    else if (!conninfo.IsAuthenticated)
                    {
                        exMessage = $"{ln}Exception at RenciService.GetService;{ln}client.IsAuthenticated returned false;" +
                            $"{ln}{ex.Message};{ln}_hostAddress:{_hostAddress};{ln}_port:{_port};{ln}_userName:{_userName};{ln}_passWord:{_passWord}{ln}";
                        throw new Exception(exMessage, ex.InnerException);
                    }
                    else
                    {
                        throw ex;
                    }
                }

                if (_isReceive)
                {
                    //receive files from sftp host path to windows server _localPath
                    try
                    {
                        if (!Directory.Exists(_localPath))
                        {
                            throw new Exception($"{ln}at RenciService.Directory.Exists(_localPath) returns false;{ln}_localPath:{_localPath};{ln};");
                        }
                        try
                        {
                            SftpFileAttributes attribs = client.GetAttributes(_hostPath);
                            if (!attribs.IsDirectory)
                            {
                                throw new Exception($"{ln}at RenciService.GetService attribs.IsDirectory returns false;{ln}_hostPath:{_hostPath};{ln};");
                            }
                        }
                        catch (AggregateException exs)
                        {
                            string exsMessage = $"{ln}at SftpFileAttributes attribs = client.GetAttributes(_hostPath), check directory(_hostPath) exists;{ln}_hostPath:{_hostPath};{ln}";
                            throw new AggregateException(exsMessage, exs.InnerException);
                        }
                        catch (Exception ex)
                        {
                            string exMessage = $"{ln}at SftpFileAttributes attribs = client.GetAttributes(_hostPath), check directory(_hostPath) exists;{ln}_hostPath:{_hostPath};{ln}";
                            throw new Exception(exMessage, ex.InnerException);
                        }

                        IEnumerable<SftpFile> hostPath_files = (IEnumerable<SftpFile>)client.ListDirectory(_hostPath);
                        if (hostPath_files == null)
                        {
                            ILogger logger = new FileLogger(_logFilePath, 5);
                            logger.LogInformation($"No files found in _hostPath:{_hostPath}");
                        };

                        foreach (SftpFile file in hostPath_files)
                        {
                            if (file.Name != "." && file.Name != ".." && !file.IsDirectory && Regex.IsMatch(file.Name, WildCardToRegular(_filePattern)) && file.IsRegularFile)
                            {
                                var fileLocalPath = Path.Combine(_localPath, file.Name);
                                var fileHostPath = $"{_hostPath}/{file.Name}";

                                try
                                {
                                    var hostFileAttrib = client.GetAttributes(fileHostPath);
                                    var modTimeHost = hostFileAttrib.LastWriteTime;
                                    var modTimeLocal = File.GetLastWriteTime(fileLocalPath);
                                    if ((!_canOverride && _doDelete && (modTimeHost > modTimeLocal)) || //user trying to delete source and not overwrite target file, ignore
                                        (_canOverride))
                                    {
                                        var fs = File.Create(Path.Combine(_localPath, file.Name), _bufferSize, FileOptions.None);
                                        client.DownloadFile(fileHostPath, fs);
                                        fs.Flush();
                                        fs.Close();
                                        fs.Dispose();
                                    }
                                    else
                                    {
                                        //continue
                                    }
                                }
                                catch (AggregateException exs) { throw exs; }
                                catch (Exception ex) { throw ex; }

                                if (_doDelete)
                                {
                                    try
                                    {
                                        file.Delete();
                                        if ((_doDelete) && (!_canOverride))
                                        {
                                            ILogger logger = new FileLogger(_logFilePath);
                                            logger.LogInformation($"_doDelete is {_doDelete} and _canOverride is {_canOverride}.");
                                        }
                                    }
                                    catch (AggregateException exs) { throw exs; }
                                    catch (Exception ex) { throw ex; }
                                }
                            }
                            else if (!file.IsRegularFile && file.Name != "." && file.Name != ".." && !file.IsDirectory)
                            {
                                ILogger logger = new FileLogger(_logFilePath);
                                logger.LogInformation($"File:{file.Name} is not RegularFile");
                            }
                            else if (file.Name != "." && file.Name != ".." && !file.IsDirectory && file.IsRegularFile)
                            {
                                ILogger logger = new FileLogger(_logFilePath);
                                logger.LogInformation($"File:{file.Name}, does not match _filePattern:{_filePattern} in _hostPath:{_hostPath}");
                            }
                            else
                            {
                                //continue
                            }
                        }
                    }
                    catch (AggregateException exs) { throw exs; }
                    catch (Exception ex) { throw ex; }
                }
                else
                {
                    //send files from windows server localPath to sftp hostPath 
                    try
                    {
                        if (!client.Exists(_hostPath))
                        {
                            string _message = $"{ln}at RenciService.GetService client.Exists(_hostPath) is false;{ln}_hostAddress:{_hostPath};{ln}_hostAddress:{_hostAddress};{ln}";
                            throw new Exception(_message);
                        }
                        try
                        {
                            DirectoryInfo di = new DirectoryInfo(_localPath);
                            FileInfo[] filesInLocalPath = di.GetFiles(searchPattern: _filePattern, searchOption: SearchOption.TopDirectoryOnly);
                            if (filesInLocalPath.Length == 0)
                            {
                                ILogger logger = new FileLogger(_logFilePath);
                                logger.LogInformation($"No files found at _localPath:{_localPath} for _filePattern:{_filePattern}");
                            }
                            else
                            {
                                foreach (FileInfo fileName in filesInLocalPath)
                                {
                                    string fileLocalPath = Path.Combine(_localPath, fileName.ToString());
                                    IsFileNotLocked(fileLocalPath);
                                    string fileHostPath = string.Format($"{_hostPath}/{fileName}");
                                    Action<ulong> _uploadCallback = null;

                                    FileStream fileStreamLocal = File.OpenRead(fileLocalPath);
                                    try
                                    {
                                        if (_canOverride)
                                        {
                                            client.UploadFile(fileStreamLocal, fileHostPath, _uploadCallback);
                                        }
                                        else
                                        {
                                            ILogger logger = new FileLogger(_logFilePath);
                                            logger.LogInformation($"File {fileLocalPath} was not uploaded to _hostPath:{_hostPath} because _canOverride:{_canOverride}");
                                        }
                                    }
                                    catch (AggregateException exs)
                                    {
                                        string _message = $"{ln}{exs.Message}{ln}at RenciService.GetService.client.UploadFile failed to send fileLocalPath:{fileLocalPath} to filehostPath:{fileHostPath};{ln}bytes sent:{(_uploadCallback.ToString() ?? "0")}";
                                        throw new AggregateException(_message, exs.InnerExceptions);
                                    }
                                    catch (Exception ex)
                                    {
                                        string _message = $"{ln}{ex.Message}{ln}at RenciService.GetService.client.UploadFile failed to send fileLocalPath:{fileLocalPath} to filehostPath:{fileHostPath};{ln}bytes sent:{(_uploadCallback.ToString() ?? "0")}";
                                        throw new Exception(_message, ex.InnerException);
                                    }
                                    fileStreamLocal.Close();
                                    fileStreamLocal.Dispose();
                                    if (_doDelete)
                                    {
                                        if (File.Exists(path: fileLocalPath.ToString()))
                                        {
                                            IsFileNotLocked(filepath: fileLocalPath.ToString());
                                            File.Delete(path: fileLocalPath.ToString());
                                        };
                                    }
                                }
                            }
                        }
                        catch (AggregateException exs) { throw exs; }
                        catch (Exception ex) { throw ex; }
                    }
                    catch (AggregateException exs) { throw exs; }
                    catch (Exception ex) { throw ex; }
                }
                client.Disconnect();
                client.Dispose();
            }
            catch (AggregateException exs) { throw exs; }
            catch (Exception ex) { throw ex; }
        }
        private static string WildCardToRegular(string value) => Regex.Escape(value).Replace("\\?", ".").Replace("\\*", ".*") + "$";
        private static bool IsFileNotLocked(string filepath, int itrys = 6, int waittime = 100)
        {
            //checks path for filepath lock and returns error if path is not a filepath/not found and false if filepath stays locked past waittime
            try
            {
                bool is_available = false;
                int i = 0;

                FileAttributes attr = File.GetAttributes(filepath);
                if ((attr & FileAttributes.Normal) == FileAttributes.Normal | (attr & FileAttributes.Archive) == FileAttributes.Archive)
                {
                    while (i < itrys && !is_available)
                    {
                        try
                        {
                            FileInfo file_i = new FileInfo(filepath);
                            FileStream stream = file_i.Open(FileMode.Open, FileAccess.Read, FileShare.None);
                            stream.Close();
                            stream = null;
                            is_available = true;
                        }
                        catch (IOException)
                        {
                            is_available = false;
                            Thread.Sleep(waittime);
                        };
                        i++;
                    }
                }
                else
                {
                    is_available = false;
                    string _message = $"{ln}at RenciService.IsfilenameLocked;{ln}Lock on file not available due to outside lock after waittime:{waittime};";
                    throw new FileNotFoundException(_message);
                }
                return is_available;
            }
            catch (AggregateException exs) { throw exs; }
            catch (Exception ex) { throw ex; }
        }
    }
    //c# script copy within namespace
    //**************************************************
}]]></ProjectItem>
          <ProjectItem
            Name="app.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-8.0.0.0" newVersion="8.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Threading.Tasks.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.2.0.1" newVersion="4.2.0.1" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>]]></ProjectItem>
          <BinaryItem
            Name="ST_d3b799b5e720451a94e08b19ba6086d4.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAM2KH2YAAAAAAAAAAOAAIiALATAAAEoAAAAIAAAAAAAAamgA
AAAgAAAAgAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAADAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAABhoAABPAAAAAIAAAGwEAAAAAAAAAAAAAAAAAAAA
AAAAAKAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAcEgAAAAgAAAASgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAGwEAAAAgAAAAAYAAABMAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAKAAAAACAAAAUgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABM
aAAAAAAAAEgAAAACAAUA0DkAAJAtAAABAAAAAAAAAGBnAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBAAhAAAAAQAAEQNvEAAACt4YCgIGBAUoAgAABt4MCwIH
BAUoAwAABt4AKgAAAAEcAAAAAAAACAgADA8AAAEAAAAACBQADBAAAAEbMAQAjgAAAAIAABEELEQc
jSkAAAElFgJ7AQAABKIlF3IBAABwoiUYAnsBAAAEoiUZA28RAAAKoiUach0AAHCiJRsCewEAAASi
KBIAAAooEwAACgNvFAAACm8VAAAKCiskBm8WAAAKCwQsGnIhAABwB28RAAAKch0AAHAoFwAACigT
AAAKBm8YAAAKLdTeCgYsBgZvGQAACtwqAAABEAAAAgBTADCDAAoAAAAAfgQsGwJ7AQAABANvEQAA
CnIdAABwKBcAAAooEwAACipKAigaAAAKfQEAAAQCKBsAAAoqngIoGgAACn0FAAAEAigbAAAKAgN9
AgAABAIEfQMAAAQCBX0EAAAEKjYCclcAAHADKAwAAAYqNgJyYQAAcAMoDAAABio2AnJxAABwAygM
AAAGKgAAABswBQDWAgAAAwAAEXJ9AABwGo0NAAABJRYoHAAACowSAAABoiUXA6IlGASiJRkoGgAA
CqIoHQAACgoCewIAAAQoHgAACjoEAQAAAnsCAAAEKB8AAAoLAnsCAAAEKCAAAAoMCCghAAAKLQcI
KCIAAAomAnsCAAAEKCMAAAotNAJ7AgAABBYoJAAACgJ7AwAABHMlAAAKJQZvJgAACiVvJwAACiVv
KAAACm8pAAAKOJwAAAAoHAAACgcoKgAACgJ7BAAABGwoKwAACigsAAAKLDECewIAAAQXKCQAAAoC
ewMAAARzJQAACiUGbyYAAAolbycAAAolbygAAApvKQAACitNKBwAAAoHKCoAAAoCewQAAARsKCsA
AAooLQAACiwvAnsCAAAEFigkAAAKAnsDAAAEcyUAAAolBm8mAAAKJW8nAAAKJW8oAAAKbykAAArd
jgEAAA0fFo0pAAABJRYCewUAAASiJRdyywAAcKIlGAJ7BQAABKIlGXIBAQBwoiUaCW8RAAAKoiUb
ch0AAHCiJRwCewUAAASiJR1yKQEAcKIlHgJ7AgAABKIlHwlyHQAAcKIlHwoCewUAAASiJR8LckUB
AHCiJR8MA6IlHw1yHQAAcKIlHw4CewUAAASiJR8PclkBAHCiJR8QBKIlHxFyHQAAcKIlHxICewUA
AASiJR8TCW8RAAAKoiUfFHIdAABwoiUfFQJ7BQAABKIoEgAACglvFAAACnMuAAAKehMEHxKNKQAA
ASUWAnsFAAAEoiUXcssAAHCiJRgCewUAAASiJRlyawEAcKIlGhEEbxEAAAqiJRtyHQAAcKIlHAJ7
BQAABKIlHXJFAQBwoiUeA6IlHwlyHQAAcKIlHwoCewUAAASiJR8LclkBAHCiJR8MBKIlHw1yHQAA
cKIlHw4CewUAAASiJR8PEQRvEQAACqIlHxByHQAAcKIlHxECewUAAASiKBIAAAoRBG8vAAAKczAA
AAp6KgAAQTQAAAAAAAAuAAAAGQEAAEcBAADYAAAADwAAAQAAAAAuAAAAGQEAAB8CAAC2AAAAEAAA
ARswBQDaAAAABAAAERQKAgNvMQAACgISAG8yAAAKBgNvMwAACgRvNAAACgZvNQAACt2wAAAAC3KB
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
AgAAAAMAAAAEAAAABAAAAAEAAAAFAAAAAQAAAAIAAAABAAAAAACCBwEAAAAAAAYAKAX4CQYAtwX4
CQYAdATlCQ8AbAoAAAYAoQRkCAYACwVkCAYA7ARkCAYAngVkCAYASAVkCAYAYQVkCAYAuARkCAYA
0wQ9BgYA7gu+BwYATgi+BwYApQi+BwYAwQi+BwYATgDMAAYA4AK+BwoAmQPKBg4AgQkMAw4ArQoM
AxIA8wgQDAYAqgeSABIAXgEQDAYA+Qe+BxIAQwwQDBIAawIeCQYA2AiSAAYAMAC+BwYAxAqSAAYA
gwiSAAoAfAXKBgYAxQe+BwYAPAT4CQYAVwTlCQYARgkYCgYA4Qg5CBYA4gNjBxYAiARjBxYAtQMk
CAYAZAa+BwYArAK+BwYAOQAyBwYAIgDMAAYAvgkJCwYAIwK+BwYATgy+BwYAoAKSAAYAlgaSAAYA
2wySAAYAAgmSAAYANAZ1DAYAkwmSAAYAoAmSAA4AGgIMAwYApAy+BwYA2AGSAAYAVQuSABIAVAEQ
DBIAhgIQDAYArgeSABIANwEQDAYAXAC+BxIAOAwQDBIAwAoeCRYAngzqCgYAHAuSAAYA1ge+BwYA
dgiSAAYAXwOSAAYA/AAjBgYAjwiSAAoAUQfKBgoAaQnKBgYAjwC+BwYArgu+BwYAWgO+BwYALwK+
BwYArgxkCAAAAACGAAAAAAABAAEAAQAQAGgLYgA1AAEAAQChABAAVgliAAAAAgAFAAEAEABeCWIA
NQACAAgAAQAQAIUBYgBNAAYADQCBARAAkQFiADUABwARAAEAEAAHCGIATQAIABYAAAAQAB8Kewo1
ABcAGAAAARAA4Qp7CqEAGQAcAAMBAACOCwAAhQAaAB8AAwEQAAEAAAA1AB0AHwAhABIIbgIhAHkG
bgIhAAMGFAMhANALFAMhABIIbgIRABIIbgIxABIIbgIhABIIbgIBAHoGbgIBAHoLbgIBAJIGbgIB
AMwIbgIBAMYCbgIBAHQBbgIBAIcGbgIBAGcMFAMBAPkFFwMBAJYCbgIBAPgDFwMBAMwBFwMBACAH
FAMBABgGFAMRAMoHGgMRAIkDHwMRALsBJAMGBrsAFANWgGALKANWgGkDKAMGAMMLLANQIAAAAACG
AJ4BMAMBAJwgAAAAAIQAFwQ4AwQASCEAAAAAhAAgBEADBwBoIQAAAACGGNgJBgAKAAAAAAAAAMYF
FQgQAAoAAAAAAAAAxgVXBhAACwAAAAAAAADGBbUJEAAMAHshAAAAAIYY2AlIAw0AoyEAAAAA5gEV
CBAAEACxIQAAAADmAVcGEAARAL8hAAAAAOYBtQkQABIA0CEAAAAAgQCBDEcBEwDoJAAAAACWABUC
TwMVAOwlAAAAAIYACAJXAxgAOCYAAAAAhhjYCQYAGgBAJgAAAACRGN4JegIaAEwmAAAAAJEA7Qhe
AxoAMCgAAAAAlgCwAWgDHwDkMQAAAACRADAJlQAtABQyAAAAAJEAAwF6Ay4AyDIAAAAAkRjeCXoC
MQDUMgAAAACGAA0IBgAxAMQ4AAAAAIYY2AkGADEAajkAAAAAgxjYCQYAMQByOQAAAACTCEIJgQMx
AJ45AAAAAJMIcQOHAzEApTkAAAAAkwh9A40DMQCtOQAAAACWCB0MlAMyALQ5AAAAAIYY2AkGADIA
vDkAAAAAkRjeCXoCMgBqOQAAAACGGNgJBgAyAMg5AAAAAIMAFwAGADIAAAABAF0IAAACAKUCAAAD
AHoGAAABAJgMAAACAKUCAAADAHoGAAABAKEMAAACAKUCAAADAHoGAAABAPkBAAABAPkBAAABAPkB
EBABAHoGEBACAAQGEBADANELAAABAPkBAAABAPkBAAABAPkBAAABAHkHAAACAPkBAAABABYJAAAC
AL0CAAADAOkFAAABABYJAAACAL0CAAABAJYCAAACAHoLAAADAGcMAAAEAMYCAAAFAHQBAAABAHkL
AAACAJEGAAADAMsIAAAEAMUCAAAFAHMBAAAGAIYGAAAHAGYMAAAIAPgFEBAJAJUCEBAKAPcDEBAL
AMsBEBAMAB8HEBANABcGEBAOAHkGAAABAPIFAAABAJsGEBACANoLEBADACwDAAABAPIFBAAMAAkA
2AkBABEA2AkGABkA2AkKACkA2AkQADEA2AkQADkA2AkQAEEA2AkQAEkA2AkQAFEA2AkQAFkA2AkQ
AGEA2AkQAAEB2AkGABEB2AkGABkB2AkGADkB2AkVAHEAAQIGAIEA7QEuAEkB4AsyAFEBNQM4AHkA
KAs9AAwAyglPABQAWgxfAEkB4AtkAGkBbAxrAHEB0wMGAHkBPwNvAGkA2AkGAJEAkAx+AEkB5wuD
AEkB8wyKAIEB+wKPAIkBzwKVAJEBpwuKAJEBtwyaAIEBpwuKAKEB4QGhAKkB2AmnALEBNgQQALEB
cwYGALEBzQMGALEB0wMGAJEAVQixAMkAxwu6AMkA7QfAAMkA8wbAAHkA2AnIAIEAuAjUAIEA2AnZ
AKEALwQQAKEAqgrpAKkAtQfwALkB3wX3AKkApAYGAMEB+wz8AHkA2AnZAKEA8AAQALkB1QUNAZkA
2AkGALkA2AkhAeEB2AksAdkB2Ak0AbEA2Ak9AfEB2AlHAckA2AmCAdEA2AmHAQECCQeNAQEC/QsG
AAECJwFrALEAEwFrAIEA2AkQANEA0wqTAQkCxwxrANEA1wyaAUkB4AuqARwAyglPACQAWgxfANkA
tAIuAEkB5Qy/AdkAxwxrABECawa/AdkAdAJrAIkBSwOqAQkC6QLFAZEA3gfKAYEB2wPSAdEAUwLc
AekBcwYGAOkBzQMGAOkB0wMGANkA+gMGAEkB5wvpAdEApwvwAZkB2AkQAJkBtwr1AUkB4Av/AWkA
YgYuAIEB5wAHAtEAYAINAkkB5wsaAoEB+gM4AAECBQwGAAEC0wMGABECUwOVAEkBfQEiAoEB0wow
AuEA2AkQAOEAAgg2AjkCEAlEAkEC2AkQAJkAhgtXAkkCfQldAnEA2AliAkkCnAtoAkkB+wxuAlEC
qwlxAkkCKQwBAFkC9Qt6AlkCPAt6AlkCAQR+AmkCQQKEAmkCqgyNAiEB2AmTAkEB2AkGAA4ANQAA
AAgAOQDAAggAPQDFAggAbAC2AggAcAC7Ag4AnQAAAAIAoQDKAgIApQDKAgoAqQDMAggArQDAAg4A
sQDVAggAvQAKAwgAwQAPAykAewDSAy4ACwCqAy4AEwCzAy4AGwDSAy4AIwDbAy4AKwAEBC4AMwAE
BC4AOwAEBC4AQwDbAy4ASwAKBC4AUwAEBC4AWwAhBEkAewDSA+MAYwC7AgMBcwC7AmMBawC7AiED
awC7AhwAIwBzAOAABwERAU0BKAJJAggAAQAJAAMAAABGCZkDAACRA58DAAAhDKUDAgAZAAMAAgAa
AAUAAQAbAAUAAgAcAAcARwBYALABuAEEgAAAAQAAAKkirgsAAAAAAABiAAAABAAAAAAAAAAAAAAA
mwLDAAAAAAAQAAAAAAAAAAAAAACkAqsGAAAAABAAAAAAAAAAAAAAAKQCnAAAAAAA5AcAAAIAAAAA
AAAArQIQDAAAAAAEAAAAAAAAAAAAAACbAr4HAAAAAAAAAAABAAAAKQoAAAoABwALAAcAbQADAQAA
ADw+Y19fRGlzcGxheUNsYXNzMTVfMAA8TWFpbj5iX18wAElFbnVtZXJhYmxlYDEAQWN0aW9uYDEA
UmVhZE9ubHlDb2xsZWN0aW9uYDEASUVudW1lcmF0b3JgMQBJbnQzMgBTVF9kM2I3OTliNWU3MjA0
NTFhOTRlMDhiMTliYTYwODZkNAA8TW9kdWxlPgBHQwBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNl
cnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AbXNjb3JsaWIAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVy
aWMAT3BlblJlYWQATG9ja0ZvclJlYWQAVGhyZWFkAElzRmlsZU5vdExvY2tlZABnZXRfSXNBdXRo
ZW50aWNhdGVkAGdldF9Jc0Nvbm5lY3RlZABQYXNzd29yZEF1dGhlbnRpY2F0aW9uTWV0aG9kAFBy
aXZhdGVLZXlBdXRoZW50aWNhdGlvbk1ldGhvZABfcGFzc1dvcmQAUmVwbGFjZQBTU0lTU2Vydmlj
ZQBSZW5jaVNlcnZpY2UARXhjZXB0aW9uc1NlcnZpY2UAR2V0U2VydmljZQBkZWZhdWx0SW5zdGFu
Y2UAX2Nhbk92ZXJyaWRlAEZpbGVNb2RlAGdldF9Vbmljb2RlAGdldF9NZXNzYWdlAG1lc3NhZ2UA
SW52b2tlAFJlYWRWYXJpYWJsZQBXcml0ZVZhcmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBl
SGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAERvd25sb2FkRmlsZQBVcGxvYWRGaWxlAFNmdHBGaWxl
AGdldF9Jc1JlZ3VsYXJGaWxlAFByaXZhdGVLZXlGaWxlAF9wcml2YXRlS2V5RmlsZQB3cml0ZVRv
Q29uc29sZQBnZXRfTmFtZQB2YXJOYW1lAF91c2VyTmFtZQBHZXREaXJlY3RvcnlOYW1lAERhdGVU
aW1lAGdldF9MYXN0V3JpdGVUaW1lAEdldExhc3RXcml0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZl
ci5EdHMuUnVudGltZQB3YWl0dGltZQBXcml0ZUxpbmUAZ2V0X05ld0xpbmUAQ29tYmluZQBFc2Nh
cGUAVHlwZQBGaWxlU2hhcmUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJj
ZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NC
YXNlAENsb3NlAERpc3Bvc2UAQ3JlYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAF9kb0RlbGV0ZQBX
YWl0Rm9yRnVsbEdDQ29tcGxldGUAQWdncmVnYXRlRXhjZXB0aW9uV3JpdGUATG9ja0ZvcldyaXRl
AENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUA
RGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRs
ZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRy
aWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25B
dHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RB
dHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBv
aW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0
eUF0dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAHZhclZhbHVlAHZhbHVlAF9pc1JlY2VpdmUA
X2FsbG9jYXRlQnVmZmVyU2l6ZQBfYnVmZmVyU2l6ZQBTeXN0ZW0uVGhyZWFkaW5nAEVuY29kaW5n
AFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcATG9nV2FybmluZwBUb1N0cmluZwBJc01hdGNoAEZs
dXNoAF9sb2dGaWxlUGF0aABfbG9jYWxQYXRoAF9ob3N0UGF0aABmaWxlcGF0aABVbmxvY2sATWlj
cm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tz
LlNjcmlwdFRhc2sAb3BfR3JlYXRlclRoYW5PckVxdWFsAHNldF9LZWVwQWxpdmVJbnRlcnZhbABf
a2VlcEFsaXZlSW50ZXJ2YWwAU3lzdGVtLkNvbGxlY3Rpb25zLk9iamVjdE1vZGVsAFNjcmlwdE9i
amVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABsb2dMZXZlbABTVF9kM2I3OTliNWU3MjA0
NTFhOTRlMDhiMTliYTYwODZkNC5kbGwARmlsZVN0cmVhbQBnZXRfSXRlbQBTeXN0ZW0ARW51bQBy
ZXNvdXJjZU1hbgBCb29sZWFuAG9wX0dyZWF0ZXJUaGFuAG9wX0xlc3NUaGFuAFRpbWVTcGFuAE9w
ZW4AU2NyaXB0TWFpbgBsbgBMb2dJbmZvcm1hdGlvbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0
ZW0uR2xvYmFsaXphdGlvbgBBY3Rpb24Ab3BfU3VidHJhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24A
U2VhcmNoT3B0aW9uAElPRXhjZXB0aW9uAEZpbGVOb3RGb3VuZEV4Y2VwdGlvbgBBZ2dyZWdhdGVF
eGNlcHRpb24AZ2V0X0lubmVyRXhjZXB0aW9uAF9maWxlUGF0dGVybgBGaWxlSW5mbwBDdWx0dXJl
SW5mbwBDcmVhdGVDb25uZWN0aW9uSW5mbwBEaXJlY3RvcnlJbmZvAFNsZWVwAHZhckRpc3AAUmVu
Y2kuU3NoTmV0LlNmdHAAV2lsZENhcmRUb1JlZ3VsYXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBJTG9n
Z2VyAEZpbGVMb2dnZXIARXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRfVmFyaWFibGVEaXNwZW5zZXIA
U3RyZWFtV3JpdGVyAFRleHRXcml0ZXIARmlyZUVycm9yAExvZ0Vycm9yAElFbnVtZXJhdG9yAEdl
dEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGlt
ZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfZDNiNzk5YjVlNzIwNDUxYTk0
ZTA4YjE5YmE2MDg2ZDQuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01v
ZGVzAFNUX2QzYjc5OWI1ZTcyMDQ1MWE5NGUwOGIxOWJhNjA4NmQ0LlByb3BlcnRpZXMAR2V0VmFy
aWFibGVzAEdldEZpbGVzAFNmdHBGaWxlQXR0cmlidXRlcwBHZXRBdHRyaWJ1dGVzAFNldHRpbmdz
AFN5c3RlbS5UZXh0LlJlZ3VsYXJFeHByZXNzaW9ucwBTeXN0ZW0uQ29sbGVjdGlvbnMARmlsZU9w
dGlvbnMAZ2V0X0lubmVyRXhjZXB0aW9ucwBXYWl0Rm9yUGVuZGluZ0ZpbmFsaXplcnMARmlsZUFj
Y2VzcwBTdWNjZXNzAEV4Y2VwdGlvblByb2Nlc3MAX2hvc3RBZGRyZXNzAGdldF9EdHMAU2NyaXB0
UmVzdWx0cwBnZXRfRXZlbnRzAEV4aXN0cwBHQ05vdGlmaWNhdGlvblN0YXR1cwBleHMARnJvbURh
eXMAX2tlZXBEYXlzAGl0cnlzAENvbmNhdABGb3JtYXQAT2JqZWN0AENvbGxlY3QAQ29ubmVjdABE
aXNjb25uZWN0AFJlbmNpLlNzaE5ldABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABCYXNlQ2xp
ZW50AFNmdHBDbGllbnQARW52aXJvbm1lbnQAZ2V0X0N1cnJlbnQAX3BvcnQATW92ZU5leHQAU3lz
dGVtLlRleHQATG9nTWVzc2FnZVRleHQAZ2V0X05vdwBhZ2dFeABSZWdleABBcnJheQBnZXRfQXNz
ZW1ibHkAQ3JlYXRlRGlyZWN0b3J5AGdldF9Jc0RpcmVjdG9yeQBMaXN0RGlyZWN0b3J5AG9wX0lu
ZXF1YWxpdHkASXNOdWxsT3JFbXB0eQAAAAAAG0UAeABjAGUAcAB0AGkAbwBuACgAcwApADoAAAM7
AAA1RgBvAGwAbABvAHcAaQBuAGcAIABJAG4AbgBlAHIAIABFAHgAYwBlAHAAdABpAG8AbgA6AAAJ
SQBOAEYATwAAD1cAQQBSAE4ASQBOAEcAAAtFAFIAUgBPAFIAAE1bAHsAMAA6AHkAeQB5AHkALQBN
AE0ALQBkAGQAIABIAEgAOgBtAG0AOgBzAHMAfQBdACAAWwB7ADEAfQBdACAAewAyAH0AewAzAH0A
ATVhAHQAIABJAEwAbwBnAGcAZQByAC4ATABvAGcATQBlAHMAcwBhAGcAZQBUAGUAeAB0ADsAACdB
AGcAZwByAGUAZwBhAHQAZQBFAHgAYwBlAHAAdABpAG8AbgA6AAAbXwBsAG8AZwBGAGkAbABlAFAA
YQB0AGgAOgAAE2wAbwBnAEwAZQB2AGUAbAA6AAARbQBlAHMAcwBhAGcAZQA6AAAVRQB4AGMAZQBw
AHQAaQBvAG4AOgAAgJt7ADAAfQBFAHgAYwBlAHAAdABpAG8AbgAgAFMAUwBJAFMAUwBlAHIAdgBp
AGMAZQAuAFcAcgBpAHQAZQBWAGEAcgBpAGEAYgBsAGUAOgB7ADEAfQB7ADIAfQA7AHsAMwB9AHYA
YQByAE4AYQBtAGUAOgB7ADQAfQA7AHsANQB9AHYAYQByAFYAYQBsAHUAZQA6AHsANgB9ADsAAF9F
AHgAYwBlAHAAdABpAG8AbgAgAGkAbgAgAFIAZQBuAGMAaQBTAGUAcgB2AGkAYwBlAC4AQwByAGUA
YQB0AGUAQwBvAG4AbgBlAGMAdABpAG8AbgBJAG4AZgBvADsAAB9wAHIAaQB2AGEAdABlAEsAZQB5
AEYAaQBsAGUAOgAAgJV7ADAAfQBoAG8AcwB0AEEAZABkAHIAZQBzAHMAOgB7ADEAfQA7AHsAMgB9
AHAAbwByAHQAOgB7ADMAfQA7AHsANAB9AHUAcwBlAHIAbgBhAG0AZQA6AHsANQB9ADsAewA2AH0A
cABhAHMAcwB3AG8AcgBkADoAewA3AH0AOwB7ADgAfQB7ADkAfQA7AHsAMQAwAH0AAEtFAHgAYwBl
AHAAdABpAG8AbgAgAGEAdAAgAFIAZQBuAGMAaQBTAGUAcgB2AGkAYwBlAC4ARwBlAHQAUwBlAHIA
dgBpAGMAZQA7AABFYwBsAGkAZQBuAHQALgBJAHMAQwBvAG4AbgBlAGMAdABlAGQAIAByAGUAdAB1
AHIAbgBlAGQAIABmAGEAbABzAGUAOwAAgJt7ADAAfQB7ADEAfQA7AHsAMgB9AF8AaABvAHMAdABB
AGQAZAByAGUAcwBzADoAewAzAH0AOwB7ADQAfQBfAHAAbwByAHQAOgB7ADUAfQA7AHsANgB9AF8A
dQBzAGUAcgBOAGEAbQBlADoAewA3AH0AOwB7ADgAfQBfAHAAYQBzAHMAVwBvAHIAZAA6AHsAOQB9
AHsAMQAwAH0AAE1jAGwAaQBlAG4AdAAuAEkAcwBBAHUAdABoAGUAbgB0AGkAYwBhAHQAZQBkACAA
cgBlAHQAdQByAG4AZQBkACAAZgBhAGwAcwBlADsAAHdhAHQAIABSAGUAbgBjAGkAUwBlAHIAdgBp
AGMAZQAuAEQAaQByAGUAYwB0AG8AcgB5AC4ARQB4AGkAcwB0AHMAKABfAGwAbwBjAGEAbABQAGEA
dABoACkAIAByAGUAdAB1AHIAbgBzACAAZgBhAGwAcwBlADsAABdfAGwAbwBjAGEAbABQAGEAdABo
ADoAAHthAHQAIABSAGUAbgBjAGkAUwBlAHIAdgBpAGMAZQAuAEcAZQB0AFMAZQByAHYAaQBjAGUA
IABhAHQAdAByAGkAYgBzAC4ASQBzAEQAaQByAGUAYwB0AG8AcgB5ACAAcgBlAHQAdQByAG4AcwAg
AGYAYQBsAHMAZQA7AAAVXwBoAG8AcwB0AFAAYQB0AGgAOgAAgMdhAHQAIABTAGYAdABwAEYAaQBs
AGUAQQB0AHQAcgBpAGIAdQB0AGUAcwAgAGEAdAB0AHIAaQBiAHMAIAA9ACAAYwBsAGkAZQBuAHQA
LgBHAGUAdABBAHQAdAByAGkAYgB1AHQAZQBzACgAXwBoAG8AcwB0AFAAYQB0AGgAKQAsACAAYwBo
AGUAYwBrACAAZABpAHIAZQBjAHQAbwByAHkAKABfAGgAbwBzAHQAUABhAHQAaAApACAAZQB4AGkA
cwB0AHMAOwAAOU4AbwAgAGYAaQBsAGUAcwAgAGYAbwB1AG4AZAAgAGkAbgAgAF8AaABvAHMAdABQ
AGEAdABoADoAAAMuAAAFLgAuAAADLwAAU18AZABvAEQAZQBsAGUAdABlACAAaQBzACAAewAwAH0A
IABhAG4AZAAgAF8AYwBhAG4ATwB2AGUAcgByAGkAZABlACAAaQBzACAAewAxAH0ALgAAC0YAaQBs
AGUAOgAAJyAAaQBzACAAbgBvAHQAIABSAGUAZwB1AGwAYQByAEYAaQBsAGUAAD0sACAAZABvAGUA
cwAgAG4AbwB0ACAAbQBhAHQAYwBoACAAXwBmAGkAbABlAFAAYQB0AHQAZQByAG4AOgAAHSAAaQBu
ACAAXwBoAG8AcwB0AFAAYQB0AGgAOgAAe2EAdAAgAFIAZQBuAGMAaQBTAGUAcgB2AGkAYwBlAC4A
RwBlAHQAUwBlAHIAdgBpAGMAZQAgAGMAbABpAGUAbgB0AC4ARQB4AGkAcwB0AHMAKABfAGgAbwBz
AHQAUABhAHQAaAApACAAaQBzACAAZgBhAGwAcwBlADsAABtfAGgAbwBzAHQAQQBkAGQAcgBlAHMA
cwA6AAA7TgBvACAAZgBpAGwAZQBzACAAZgBvAHUAbgBkACAAYQB0ACAAXwBsAG8AYwBhAGwAUABh
AHQAaAA6AAAlIABmAG8AcgAgAF8AZgBpAGwAZQBQAGEAdAB0AGUAcgBuADoAAA97ADAAfQAvAHsA
MQB9AACAh0YAaQBsAGUAIAB7ADAAfQAgAHcAYQBzACAAbgBvAHQAIAB1AHAAbABvAGEAZABlAGQA
IAB0AG8AIABfAGgAbwBzAHQAUABhAHQAaAA6AHsAMQB9ACAAYgBlAGMAYQB1AHMAZQAgAF8AYwBh
AG4ATwB2AGUAcgByAGkAZABlADoAewAyAH0AAICVYQB0ACAAUgBlAG4AYwBpAFMAZQByAHYAaQBj
AGUALgBHAGUAdABTAGUAcgB2AGkAYwBlAC4AYwBsAGkAZQBuAHQALgBVAHAAbABvAGEAZABGAGkA
bABlACAAZgBhAGkAbABlAGQAIAB0AG8AIABzAGUAbgBkACAAZgBpAGwAZQBMAG8AYwBhAGwAUABh
AHQAaAA6AAAjIAB0AG8AIABmAGkAbABlAGgAbwBzAHQAUABhAHQAaAA6AAAXYgB5AHQAZQBzACAA
cwBlAG4AdAA6AAADMAAABVwAPwAABVwAKgAABS4AKgAAAyQAAIDTewAwAH0AYQB0ACAAUgBlAG4A
YwBpAFMAZQByAHYAaQBjAGUALgBJAHMAZgBpAGwAZQBuAGEAbQBlAEwAbwBjAGsAZQBkADsAewAx
AH0ATABvAGMAawAgAG8AbgAgAGYAaQBsAGUAIABuAG8AdAAgAGEAdgBhAGkAbABhAGIAbABlACAA
ZAB1AGUAIAB0AG8AIABvAHUAdABzAGkAZABlACAAbABvAGMAawAgAGEAZgB0AGUAcgAgAHcAYQBp
AHQAdABpAG0AZQA6AHsAMgB9ADsAACNVAHMAZQByADoAOgBoAG8AcwB0AEEAZABkAHIAZQBzAHMA
AB1VAHMAZQByADoAOgBoAG8AcwB0AFAAYQB0AGgAACNVAHMAZQByADoAOgBmAGkAbABlAFAAYQB0
AHQAZQByAG4AAB1VAHMAZQByADoAOgB1AHMAZQByAE4AYQBtAGUAAB1VAHMAZQByADoAOgBwAGEA
cwBzAFcAbwByAGQAAB9VAHMAZQByADoAOgBsAG8AYwBhAGwAUABhAHQAaAAAFVUAcwBlAHIAOgA6
AHAAbwByAHQAAB9VAHMAZQByADoAOgBpAHMAUgBlAGMAZQBpAHYAZQAAI1UAcwBlAHIAOgA6AGwA
bwBnAEYAaQBsAGUAUABhAHQAaAAAKVUAcwBlAHIAOgA6AHAAcgBpAHYAYQB0AGUASwBlAHkARgBp
AGwAZQAAHVUAcwBlAHIAOgA6AGQAbwBEAGUAbABlAHQAZQAAI1UAcwBlAHIAOgA6AGMAYQBuAE8A
dgBlAHIAcgBpAGQAZQAAL1UAcwBlAHIAOgA6AGsAZQBlAHAAQQBsAGkAdgBlAEkAbgB0AGUAcgB2
AGEAbAAAIVUAcwBlAHIAOgA6AGIAdQBmAGYAZQByAFMAaQB6AGUAABlmAGkAbABlAFAAYQB0AHQA
ZQByAG4AOgAABSwAIAAAGWgAbwBzAHQAQQBkAGQAcgBlAHMAcwA6AAATcABhAHMAcwBXAG8AcgBk
ADoAAAMsAACAgXsAMAB9AGgAbwBzAHQAUABhAHQAaAA6AHsAMQB9ACwAIAB7ADIAfQB1AHMAZQBy
AE4AYQBtAGUAOgB7ADMAfQAsACAAewA0AH0AbABvAGMAYQBsAFAAYQB0AGgAOgB7ADUAfQAsACAA
ewA2AH0AcABvAHIAdAA6AHsANwB9ACwAAHN7ADAAfQBpAHMAUgBlAGMAZQBpAHYAZQA6AHsAMQB9
ACwAIAB7ADIAfQBwAHIAaQB2AGEAdABlAEsAZQB5AEYAaQBsAGUAOgB7ADMAfQAsACAAewA0AH0A
ZABvAEQAZQBsAGUAdABlADoAewA1AH0ALAAAgKF7ADAAfQBjAGEAbgBPAHYAZQByAHIAaQBkAGUA
OgB7ADEAfQAsAHsAMgB9AGsAZQBlAHAAQQBsAGkAdgBlAEkAbgB0AGUAcgB2AGEAbAA6AHsAMwB9
ACwAewA0AH0AYgB1AGYAZgBlAHIAUwBpAHoAZQA6AHsANQB9ACwAewA2AH0AbABvAGcARgBpAGwA
ZQBQAGEAdABoADoAewA3AH0AACFTAHkAcwB0AGUAbQA6ADoAVABhAHMAawBOAGEAbQBlAAADOgAA
NUMAOgBcAHMAZgB0AHAAbABvAGcAZwBpAG4AZwBcAGwAbwBnAGcAaQBuAGcALgB0AHgAdAAAM2UA
dQAtAGMAZQBuAHQAcgBhAGwALQAxAC4AcwBmAHQAcABjAGwAbwB1AGQALgBpAG8AARsvAHMAZgB0
AHAAdAByAGEAbgBzAGYAZQByAAAHKgAuACoAAEFmAGQAMAAxADkAMAA2AGEAZAA1ADYANAA0AGMA
ZAA5ADkAZAAyADIAMgBiADYAZABkADMAMgBlADYANQAxAGQAAEFuADgAUQBQAHQAbgB0AFkAcgBp
AG4AVABFAFAAeABnADYAdwBLAG0AeQBWAHAAdwBVADAANQBpADYATgBDAGUAAB9DADoAXABzAGYA
dABwAHQAcgBhAG4AcwBmAGUAcgAAAQBxUwBUAF8AZAAzAGIANwA5ADkAYgA1AGUANwAyADAANAA1
ADEAYQA5ADQAZQAwADgAYgAxADkAYgBhADYAMAA4ADYAZAA0AC4AUAByAG8AcABlAHIAdABpAGUA
cwAuAFIAZQBzAG8AdQByAGMAZQBzAABEXmGuvZJyQqWZwS77f33qAAQgAQEIAyAAAQUgAQEREQQg
AQEOBiABARGAmQYHAhI9EkEKBwIVEkUBEkESQQMgAA4FAAEOHQ4EAAEBDgkgABUSgK0BEkEHFRKA
sQESQQggABUSRQETAAYVEkUBEkEEIAATAAYAAw4ODg4DIAACAwAADgoHBQ4RSQ4SPRJBBAAAEUkG
AAIODh0cBAABAg4FAAERSQ4EAAEODgYAARKAzQ4FAAASgNEJIAQBDgISgNEICAACEWURSRFJBQAB
EWUNBwACAhFlEWULIAIBDhUSgLEBEkEEIAASQQYgAgEOEkEIBwMSVRI9EkEGIAEBEBJVBiABEoDd
HAQgAQEcBhABAB0eAAMKARwFBwISVRwDIAAcDwcGEl0dEmESWRJhEj0SQQogAwEOEYDlEYDpByAC
ARKA9Q4IIAIBDh0SgPEJIAQBDggOHRJhBSACAQ4ONAcXEWUSWRJpEkESPRJBFRJFARJtEm0ODhFJ
EUkSXR0ScR0ScQgScQ4OFRJ1AQsSXRI9EkEEIAEBCgUgAQESWQUgAQERZQYgARKBBQ4PIAIVEoCx
ARJtDhUSdQEIBQACDg4OBxUSgLEBEm0GFRJFARJtBQACAg4OBCAAEUkHAAICEUkRSQkAAxJdDggR
gQ0MIAMBDhKA9RUSdQELBgADDg4cHAQgAQIOCSACHRJxDhGBFQcABA4ODg4OBQABEl0ODCADARKA
9Q4VEnUBCwcABA4OHBwcBSACDg4OBwcEAggReQIFAAEReQ4NIAMSXRGA5RGA6RGBGQQAAQEIDQcH
EhQOEiwSPQ4SQQ4FIAASgSUEIAASUQUgAgEcGAUgABKBKQIGDgggBQIIDg4OCAMAAAEFAAARgTEI
AAESgTURgTkFIAASgT0HIAIBDhKBPQi3elxWGTTgiQiJhF3NgIDMkQgc7p+L3j2xBgQAAAAABAEA
AAAEABAAAAQFAAAAAQEIPAAAAAAAAAA0YwA6AFwAcwBmAHQAcABsAG8AZwBnAGkAbgBnAFwAbABv
AGcAZwBpAG4AZwAuAHQAeAB0AAQGAAAABGQAAAACBggCBgIEBhKAkQQGEoCVAwYSJAMGESgDBhI9
ByADARI5Ag4HIAMBEj0CDgcgAwESQQIOBiADAQ4ICAcAAwESUQ4cBiACHBJRDgkABRJZDg4IDg4R
AA4BDg4ODg4OCAIOAgIKCA4GAAMCDggIBQAAEoCRBQAAEoCVBgABARKAlQQAABIkBQgAEoCRBQgA
EoCVBAgAEiQIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAA
KAEAI1NUX2QzYjc5OWI1ZTcyMDQ1MWE5NGUwOGIxOWJhNjA4NmQ0AAAFAQAAAAAWAQARQ29weXJp
Z2h0IEAgIDIwMjQAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3Jr
RGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43ALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJl
c291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVy
ZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJj
ZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABAaAAAAAAAAAAAAABa
aAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATGgAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2Nv
cmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAA
AQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFiAAAAQBAAAAAAAAAAAAAAQBDQAAABW
AFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEArgupIgAAAQCuC6ki
PwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAA
AAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEcAMAAAEAUwB0AHIAaQBuAGcA
RgBpAGwAZQBJAG4AZgBvAAAATAMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBl
AG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAAJAABAEYA
aQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwBkADMAYgA3ADkAOQBiADUAZQA3
ADIAMAA0ADUAMQBhADkANABlADAAOABiADEAOQBiAGEANgAwADgANgBkADQAAAA8AA4AAQBGAGkA
bABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAA4ADcAMwAuADIAOQA5ADAAAABwACgAAQBJ
AG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGQAMwBiADcAOQA5AGIANQBlADcAMgAwADQA
NQAxAGEAOQA0AGUAMAA4AGIAMQA5AGIAYQA2ADAAOAA2AGQANAAuAGQAbABsAAAASAASAAEATABl
AGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAA
MgA0AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBP
AHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8AZAAzAGIANwA5ADkAYgA1AGUA
NwAyADAANAA1ADEAYQA5ADQAZQAwADgAYgAxADkAYgBhADYAMAA4ADYAZAA0AC4AZABsAGwAAABo
ACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfAGQAMwBiADcAOQA5AGIANQBlADcA
MgAwADQANQAxAGEAOQA0AGUAMAA4AGIAMQA5AGIAYQA2ADAAOAA2AGQANAAAAEAADgABAFAAcgBv
AGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAA4ADcAMwAuADIAOQA5ADAAAABEAA4A
AQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4ADgANwAzAC4AMgA5
ADkAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAABgAAAMAAAAbDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="166.666666666667,42.6666666666667"
          Id="Package\sftp_send_receive"
          TopLeft="533.749995771795,236.121048612458" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>