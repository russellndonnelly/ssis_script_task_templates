<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/8/2024 10:31:28 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="RUSSELLASUS"
  DTS:CreatorName="RUSSELLASUS\russell.n.donnelly"
  DTS:DTSID="{13CE58FD-6898-4217-9B29-8E9569B453FE}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5397.1"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="186"
  DTS:VersionGUID="{AD49B660-8C98-4B9D-95BD-EC8C8D7230CF}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">14,7,OnError,19,OnExecStatusChanged,13,OnInformation,13,OnPostExecute,14,OnPostValidate,12,OnPreExecute,13,OnPreValidate,10,OnProgress,13,OnQueryCancel,12,OnTaskFailed,22,OnVariableValueChanged,9,OnWarning,10,Diagnostic,12,DiagnosticEx</DTS:Property>
    <DTS:Property
      DTS:EventName="Diagnostic"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="DiagnosticEx"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnExecStatusChanged"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnInformation"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPostExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPostValidate"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPreExecute"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnPreValidate"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnProgress"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnQueryCancel"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnTaskFailed"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnVariableValueChanged"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnWarning"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\sftp_send_receive"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{DA114437-EABD-4F35-A824-A2B12E0885A0}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="sftp_send_receive"
      DTS:ThreadHint="0">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{8552D115-7669-4AA0-8A13-A2DD2D381DA1}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="bufferSize">
          <DTS:VariableValue
            DTS:DataType="3">4096</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{D2F70FD1-81E8-49E5-8702-993B5F8FBE45}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="canOverride">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{C950B81B-F8AA-4E1E-913A-1468B6593CD6}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="doDelete">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{7C8FD6FC-82EE-4850-98E2-E1C14647F158}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="filePattern">
          <DTS:VariableValue
            DTS:DataType="8">*.*</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{73BE7454-8A03-426C-82F3-807FC572518B}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="hostAddress">
          <DTS:VariableValue
            DTS:DataType="8">eu-central-1.sftpcloud.io</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{FA67A102-B75D-4C8A-A1E8-02B29875A3E8}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="hostPath">
          <DTS:VariableValue
            DTS:DataType="8">/sftptransfer</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{211A2D17-BDA9-408F-85B4-10879E35CF80}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="isReceive">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{73B422CA-8581-4865-8038-D2DEE171D490}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="keepAliveInterval">
          <DTS:VariableValue
            DTS:DataType="3">60</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{8B360DEC-A112-4737-B9C5-FE67D0876DEE}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="localPath">
          <DTS:VariableValue
            DTS:DataType="8">C:\sftptransfer</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{FDBB6FF1-3EE8-4DDB-A61C-20F6D37BE9F5}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="logFilePath">
          <DTS:VariableValue
            DTS:DataType="8">C:\sftplogging\logging.txt</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{6E43F045-A26F-4BAA-804F-88BBD5AC4B0F}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="passWord">
          <DTS:VariableValue
            DTS:DataType="8">0EW5gfK99aNU0ZRSCALDS8Ad24r7JrTz</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{9EEA175E-9709-4478-A518-A5D174B57D4E}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="port">
          <DTS:VariableValue
            DTS:DataType="3">22</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{7A55E8D7-9A92-4D0F-8077-F1D7F05B15C2}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="privateKeyFile">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{62661762-ADE3-45DD-867A-E8E947A34F49}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="userName">
          <DTS:VariableValue
            DTS:DataType="8">afe197df37f342099ac5a830cd43333a</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:LoggingOptions
        DTS:FilterKind="0"
        DTS:LoggingMode="1">
        <DTS:Property
          DTS:DataType="8"
          DTS:Name="EventFilter">1,7,OnError</DTS:Property>
        <DTS:Property
          DTS:EventName="OnError"
          DTS:Name="ColumnFilter">
          <DTS:Property
            DTS:Name="Computer">-1</DTS:Property>
          <DTS:Property
            DTS:Name="Operator">-1</DTS:Property>
          <DTS:Property
            DTS:Name="SourceName">-1</DTS:Property>
          <DTS:Property
            DTS:Name="SourceID">-1</DTS:Property>
          <DTS:Property
            DTS:Name="ExecutionID">-1</DTS:Property>
          <DTS:Property
            DTS:Name="MessageText">-1</DTS:Property>
          <DTS:Property
            DTS:Name="DataBytes">-1</DTS:Property>
        </DTS:Property>
      </DTS:LoggingOptions>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_d3b799b5e720451a94e08b19ba6086d4"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ExceptionProcess.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;

namespace ST_d3b799b5e720451a94e08b19ba6086d4
{
    //c# script copy within namespace
    //**************************************************
    public class ExceptionProcess
    {
        private readonly string ln = Environment.NewLine;

        public void ExceptionsService(Action action, bool writeToConsole, string logFilePath)
        {
            try
            {
                action.Invoke();
            }
            catch (AggregateException aggEx)
            {
                AggregateExceptionWrite(aggEx, writeToConsole, logFilePath);
            }
            catch (Exception ex)
            {
                ExceptionWrite(ex, writeToConsole, logFilePath);
            }
        }

        protected void AggregateExceptionWrite(AggregateException aggEx, bool writeToConsole, string logFilePath)
        {
            if (writeToConsole)
            {
                Console.WriteLine($"{ln}Exception(s):{ln}{aggEx.Message};{ln}");
            }
            IEnumerable<Exception> innerExceptions = aggEx.InnerExceptions;
            foreach (Exception inEx in innerExceptions)
            {
                if (writeToConsole)
                {
                    Console.WriteLine($"Following Inner Exception:{inEx.Message};");
                }
                //ILogger loggerfile = new FileLogger(logFilePath, 5);
                //loggerfile.LogInformation($"{inEx.Message}{ln};");
            }
        }

        protected void ExceptionWrite(Exception ex, bool writeToConsole, string logFilePath)
        {
            if (writeToConsole)
            {
                Console.WriteLine($"{ln}{ex.Message};");
            }
            //ILogger loggerfile = new FileLogger(logFilePath, 5);
            //loggerfile.LogInformation($"{ex.Message}{ln};");
        }
    }

    //c# script copy within namespace
    //**************************************************
}]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
	<package id="System.Runtime.CompilerServices.Unsafe" version="4.5.3" targetFramework="net47" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Settings.get_Default():ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Sett" +
    "ings")]

namespace ST_d3b799b5e720451a94e08b19ba6086d4.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_d3b799b5e720451a94e08b19ba6086d4</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_d3b799b5e720451a94e08b19ba6086d4</msb:DisplayName>
    <msb:ProjectId>{F8EBCC10-BEC0-473D-B12C-B72C8CC07942}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_d3b799b5e720451a94e08b19ba6086d4.csproj" />
    <msb:File Include="ILogger.cs" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="ExceptionProcess.cs" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="SSISService.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="app.config" />
    <msb:File Include="packages.config" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="RenciService.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;

//
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_d3b799b5e720451a94e08b19ba6086d4")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_d3b799b5e720451a94e08b19ba6086d4")]
[assembly: AssemblyCopyright("Copyright @  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[//#define DEBUG
#define IN_SSIS

#region Namespaces

using System;

#endregion Namespaces

namespace ST_d3b799b5e720451a94e08b19ba6086d4
{
    //**************************************************
    //c# script copy to vs, start under namespace to keep namespace in the project

    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        private readonly string ln = Environment.NewLine;
        private string logFilePath = @"C:\sftplogging\logging.txt";

        private string hostAddress = "eu-central-1.sftpcloud.io";
        private string hostPath = "/sftptransfer";
        private string filePattern = "*.*";
        private string userName = "afe197df37f342099ac5a830cd43333a";
        private string passWord = "0EW5gfK99aNU0ZRSCALDS8Ad24r7JrTz";
        private string localPath = @"C:\sftptransfer";
        private int port = 22;
        private bool isReceive = true;
        private string privateKeyFile = "";
        private bool doDelete = true;
        private bool canOverride = true;
        private int keepAliveInterval = 60;
        private int bufferSize = 4096;

        public void Main()
        {
            try
            {
#if IN_SSIS
                SSISService sSISS = new SSISService();
                hostAddress = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::hostAddress").ToString();
                hostPath = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::hostPath").ToString();
                filePattern = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::filePattern").ToString();
                userName = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::userName").ToString();
                passWord = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::passWord").ToString();
                localPath = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::localPath").ToString();
                port = (int)sSISS.ReadVariable(Dts.VariableDispenser, "User::port");
                isReceive = (bool)sSISS.ReadVariable(Dts.VariableDispenser, "User::isReceive");
                logFilePath = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::logFilePath");
                privateKeyFile = (string)sSISS.ReadVariable(Dts.VariableDispenser, "User::privateKeyFile").ToString();
                doDelete = (bool)sSISS.ReadVariable(Dts.VariableDispenser, "User::doDelete");
                canOverride = (bool)sSISS.ReadVariable(Dts.VariableDispenser, "User::canOverride");
                keepAliveInterval = (int)sSISS.ReadVariable(Dts.VariableDispenser, "User::keepAliveInterval");
                bufferSize = (int)sSISS.ReadVariable(Dts.VariableDispenser, "User::bufferSize");
#endif
                string message = string.Format($"{ln}filePattern:{filePattern}, {ln}hostAddress:{hostAddress}, {ln}passWord:{passWord}," +
                $"{ln}hostPath:{hostPath}, {ln}userName:{userName}, {ln}localPath:{localPath}, {ln}port:{port}," +
                $"{ln}isReceive:{isReceive}, {ln}privateKeyFile:{privateKeyFile}, {ln}doDelete:{doDelete}," +
                $"{ln}canOverride:{canOverride},{ln}keepAliveInterval:{keepAliveInterval},{ln}bufferSize:{bufferSize},{ln}logFilePath:{logFilePath}");
#if DEBUG
                Console.WriteLine(message);
#endif
#if IN_SSIS
#if DEBUG
                ILogger loggerssis = new FileLogger((string)sSISS.ReadVariable(Dts.VariableDispenser, "User::logFilePath").ToString(), 5);
                loggerssis.LogInformation(message);
                bool fireAgain = false;
                Dts.Events.FireInformation(0, "", message, string.Empty, helpContext: 0, ref fireAgain);
#endif
#endif
                RenciService.GetService
                (
                    _hostAddress: hostAddress
                    , _hostPath: hostPath
                    , _filePattern: filePattern
                    , _userName: userName
                    , _passWord: passWord
                    , _localPath: localPath
                    , _port: port
                    , _isReceive: isReceive
                    , _logFilePath: logFilePath
                    , _privateKeyFile: privateKeyFile
                    , _doDelete: doDelete
                    , _canOverride: canOverride
                    , _keepAliveInterval: keepAliveInterval
                    , _bufferSize: bufferSize

                );
            }
            catch (AggregateException exs)
            {
                ExceptionProcess eh = new ExceptionProcess();
#if DEBUG
                eh.ExceptionsService(() => { throw exs; }, true, logFilePath);
#else
                eh.ExceptionsService(() => { throw exs; }, false, logFilePath);
#endif
#if IN_SSIS
                SSISService sSISS = new SSISService();
                string taskName = (string)sSISS.ReadVariable(Dts.VariableDispenser, "System::TaskName").ToString();
                ILogger loggerssis = new FileLogger((string)sSISS.ReadVariable(Dts.VariableDispenser, "User::logFilePath").ToString(), 5);
                loggerssis.LogInformation($"{taskName}:{ln}{exs.Message};{ln}");
#endif
#if IN_SSIS
                Dts.Events.FireError(0, taskName, exs.Message, string.Empty, helpContext: 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
#endif
            }
            catch (Exception ex)
            {
                ExceptionProcess eh = new ExceptionProcess();
#if DEBUG
                eh.ExceptionsService(() => { throw ex; }, true, logFilePath);
#else
                //eh.ExceptionsService(() => { throw ex; }, false, logFilePath);
#endif
#if IN_SSIS
                SSISService sSISS = new SSISService();
                string taskName = (string)sSISS.ReadVariable(Dts.VariableDispenser, "System::TaskName").ToString();
                ILogger loggerssis = new FileLogger((string)sSISS.ReadVariable(Dts.VariableDispenser, "User::logFilePath").ToString(), 5);
                loggerssis.LogInformation($"{taskName}:{ln}{ex.Message};{ln}");
#endif
#if IN_SSIS
                Dts.Events.FireError(0, taskName, ex.Message, string.Empty, helpContext: 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
#endif
            }
            finally
            {
                GC.Collect();
                GC.WaitForPendingFinalizers();
                GC.WaitForFullGCComplete();
#if DEBUG
                Console.WriteLine($"{ln}finally statement reached");
                Console.ReadLine();
#endif
#if IN_SSIS
                Dts.TaskResult = (int)ScriptResults.Success;
#endif
            }
        }

#if IN_SSIS

        private enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };

#endif
    }

    //c# script copy within namespace
    //**************************************************
}]]></ProjectItem>
          <ProjectItem
            Name="ILogger.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.IO;
using System.Text;

namespace ST_d3b799b5e720451a94e08b19ba6086d4
{
    //c# script copy within namespace
    //**************************************************
    public interface ILogger
    {
        void LogInformation(string message);

        void LogWarning(string message);

        void LogError(string message);
    }

    public class FileLogger : ILogger
    {
        private readonly string _logFilePath;
        private readonly int _allocateBufferSize;
        private readonly int _keepDays;
        private readonly string ln = Environment.NewLine;

        public FileLogger(string logFilePath = "", int allocateBufferSize = 4096, int keepDays = 5)
        {
            _logFilePath = logFilePath;
            _allocateBufferSize = allocateBufferSize;
            _keepDays = keepDays;
        }

        public void LogInformation(string message)
        {
            LogMessageText("INFO", message);
        }

        public void LogWarning(string message)
        {
            LogMessageText("WARNING", message);
        }

        public void LogError(string message)
        {
            LogMessageText("ERROR", message);
        }

        private void LogMessageText(string logLevel, string message)
        {
            string logEntry = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] [{logLevel}] {message}{Environment.NewLine}";
            try
            {
                if (!String.IsNullOrEmpty(_logFilePath))        //ILogger will not try to log if null/empty
                {
                    DateTime lastWriteTime = File.GetLastWriteTime(_logFilePath);
                    var fileDirectory = Path.GetDirectoryName(_logFilePath);
                    if (!Directory.Exists(fileDirectory))
                    {
                        Directory.CreateDirectory(fileDirectory);
                    }

                    if ((!File.Exists(_logFilePath)))
                    {
                        StreamWriter sw = new StreamWriter(_logFilePath, false, Encoding.Unicode, _allocateBufferSize);
                        sw.Write(logEntry);
                        sw.Flush();
                        sw.Close();
                        sw.Dispose();
                    }
                    else if (DateTime.Now - lastWriteTime < TimeSpan.FromDays(_keepDays))
                    {
                        StreamWriter sw = new StreamWriter(_logFilePath, true, Encoding.Unicode, _allocateBufferSize);
                        sw.Write(logEntry);
                        sw.Flush();
                        sw.Close();
                        sw.Dispose();
                    }
                    else if (DateTime.Now - lastWriteTime >= TimeSpan.FromDays(_keepDays))
                    {
                        StreamWriter sw = new StreamWriter(_logFilePath, false, Encoding.Unicode, _allocateBufferSize);
                        sw.Write(logEntry);
                        sw.Flush();
                        sw.Close();
                        sw.Dispose();
                    }
                    else
                    {
                        //continue
                    }
                }
                else
                {
                    //continue
                }
            }
            catch (AggregateException exs)
            {
                throw new AggregateException($"{ln}at ILogger.LogMessageText;" +
                    $"{ln}AggregateException:{exs.Message};{ln}_logFilePath:{_logFilePath};{ln}logLevel:{logLevel};{ln}message:{message};{ln}{exs.Message};{ln}", exs.InnerExceptions);
            }
            catch (Exception ex)
            {
                throw new Exception($"{ln}at ILogger.LogMessageText;" +
                    $"{ln}Exception:{ex.Message};{ln}logLevel:{logLevel};{ln}message:{message};{ln}{ex.Message};{ln}", ex.InnerException);
            }
        }
    }

    //c# script copy within namespace
    //**************************************************
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_d3b799b5e720451a94e08b19ba6086d4.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_d3b799b5e720451a94e08b19ba6086d4.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_d3b799b5e720451a94e08b19ba6086d4.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{AA1E36C9-B502-4853-9F5F-42FA4116E20C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_d3b799b5e720451a94e08b19ba6086d4</RootNamespace>
    <AssemblyName>ST_d3b799b5e720451a94e08b19ba6086d4</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>5</WarningLevel>
    <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.Bcl.AsyncInterfaces, Version=8.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>C:\Users\russell.n.donnelly\AppData\Local\Temp\Vsta\SSIS_ST160\VstaPiPQcEiyxE29HgM3C31_iQ\packages\Microsoft.Bcl.AsyncInterfaces.8.0.0\lib\net462\Microsoft.Bcl.AsyncInterfaces.dll</HintPath>
    </Reference>
    <Reference Include="Renci.SshNet, Version=2024.0.0.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Renci.SshNet\v4.0_2023.0.0.0__1cee9f8bde3db106\Renci.SshNet.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Threading.Tasks.Extensions, Version=4.2.0.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>C:\Users\russell.n.donnelly\AppData\Local\Temp\Vsta\SSIS_ST160\VstaPiPQcEiyxE29HgM3C31_iQ\packages\System.Threading.Tasks.Extensions.4.5.4\lib\net461\System.Threading.Tasks.Extensions.dll</HintPath>
    </Reference>
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="ExceptionProcess.cs" />
    <Compile Include="ILogger.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="SSISService.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="app.config" />
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="RenciService.cs" />
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Connected Services\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="SSISService.cs"
            Encoding="UTF8"><![CDATA[using Microsoft.SqlServer.Dts.Runtime;
using System;

namespace ST_d3b799b5e720451a94e08b19ba6086d4
{
    //c# script copy within namespace
    //**************************************************
    public partial class SSISService : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        private static string ln = Environment.NewLine;

        #region example WriteVariable

        /// <summary>
        ///Example:  object myVarValue = "Abcd"; WriteVariable("User::MyVar", myVarValue);
        /// </summary>

        #endregion example WriteVariable

        public static void WriteVariable(VariableDispenser varDisp, string varName, object varValue)
        {
            try
            {
                Variables vars = null;
                varDisp.LockForWrite(varName);
                varDisp.GetVariables(ref vars);
                vars[varName].Value = varValue;
                vars.Unlock();
            }
            catch (AggregateException exs)
            {
                throw new AggregateException(String.Format($"{ln}Exception SSISService.WriteVariable:{ln}{exs.Message};{ln}varName:{varName};{ln}varValue:{varValue};"), exs.InnerException);
            }
            catch (Exception ex)
            {
                throw new Exception(String.Format($"{ln}Exception SSISService.WriteVariable:{ln}{ex.Message};{ln}varName:{varName};{ln}varValue:{varValue};"), ex.InnerException);
            }
        }

        #region example ReadVariable uncomment when moved to ssis script

        ///< summary >
        /// Example:  object myVarValue = ReadVariable("User::MyVar");
        ///</ summary >

        #endregion example ReadVariable uncomment when moved to ssis script

        public object ReadVariable(VariableDispenser varDisp, string varName)
        {
            try
            {
                Variables vars = null;
                object result;
                varDisp.LockForRead(varName);
                varDisp.GetVariables(ref vars);
                result = vars[varName].Value;
                vars.Unlock();
                varDisp = null;
                return result;
            }
            catch { return null; }
        }
    }

    //c# script copy within namespace
    //**************************************************
}]]></ProjectItem>
          <ProjectItem
            Name="RenciService.cs"
            Encoding="UTF8"><![CDATA[using Renci.SshNet;
using Renci.SshNet.Sftp;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading;

namespace ST_d3b799b5e720451a94e08b19ba6086d4
{
    //c# script copy within namespace
    //**************************************************
    public static class RenciService
    {
        private static readonly string ln = Environment.NewLine;

        private static Renci.SshNet.ConnectionInfo CreateConnectionInfo(string privateKeyFile, string hostAddress, int port, string userName, string passWord)
        {
            try
            {
                if (!string.IsNullOrEmpty(privateKeyFile))
                {
                    var keystream = new FileStream(privateKeyFile, FileMode.Open, FileAccess.Read);
                    return new Renci.SshNet.ConnectionInfo(host: hostAddress, port: port, username: userName,
                                                new[] { new PrivateKeyAuthenticationMethod(username: userName,
                                                        new PrivateKeyFile(privateKey: keystream, passPhrase: passWord)) });
                }
                else
                {
                    AuthenticationMethod authmethod = new PasswordAuthenticationMethod(username: userName, password: passWord);
                    return new Renci.SshNet.ConnectionInfo(host: hostAddress, port: port, username: userName, new[] { authmethod });
                }
            }
            catch (AggregateException exs)
            {
                throw new AggregateException($"{ln}Exception in RenciService.CreateConnectionInfo;{ln}privateKeyFile:{privateKeyFile};" +
                    $"{ln}hostAddress:{hostAddress};{ln}port:{port};{ln}username:{userName};{ln}password:{passWord};{ln}{exs.Message};{ln}", exs.InnerException);
            }
            catch (Exception ex)
            {
                throw new Exception($"{ln}Exception in RenciService.CreateConnectionInfo;{ln}privateKeyFile:{privateKeyFile};" +
                    $"{ln}hostAddress:{hostAddress};{ln}port:{port};{ln}username:{userName};{ln}password:{passWord};{ln}{ex.Message};{ln}", ex.InnerException);
            }
        }

        public static void GetService
            (
                string _hostAddress
                , string _hostPath
                , string _filePattern
                , string _userName
                , string _passWord
                , string _localPath
                , int _port
                , bool _isReceive
                , string _privateKeyFile = ""
                , bool _doDelete = true
                , bool _canOverride = true
                , long _keepAliveInterval = 60
                , int _bufferSize = 4096
                , string _logFilePath = @"c:\sftplogging\logging.txt"
            )
        {
            try
            {
                TimeSpan _keepaliveinterval = new TimeSpan(ticks: _keepAliveInterval);
                Renci.SshNet.ConnectionInfo conninfo = CreateConnectionInfo(_privateKeyFile, _hostAddress, _port, _userName, _passWord);
                AuthenticationMethod authmethod = new PasswordAuthenticationMethod(_userName, password: _passWord);
                SftpClient client = new SftpClient(conninfo)
                {
                    KeepAliveInterval = _keepaliveinterval
                };
                try
                {
                    client.Connect();
                }
                catch (Exception ex)
                {
                    string exMessage;
                    if (!client.IsConnected)
                    {
                        exMessage = $"{ln}Exception at RenciService.GetService;{ln}client.IsConnected returned false;" +
                            $"{ln}{ex.Message};{ln}_hostAddress:{_hostAddress};{ln}_port:{_port};{ln}_userName:{_userName};{ln}_passWord:{_passWord}{ln}";
                        throw new Exception(exMessage, ex.InnerException);
                    }
                    else if (!conninfo.IsAuthenticated)
                    {
                        exMessage = $"{ln}Exception at RenciService.GetService;{ln}client.IsAuthenticated returned false;" +
                            $"{ln}{ex.Message};{ln}_hostAddress:{_hostAddress};{ln}_port:{_port};{ln}_userName:{_userName};{ln}_passWord:{_passWord}{ln}";
                        throw new Exception(exMessage, ex.InnerException);
                    }
                    else
                    {
                        throw ex;
                    }
                }

                if (_isReceive)
                {
                    //receive files from sftp host path to windows server _localPath
                    try
                    {
                        if (!Directory.Exists(_localPath))
                        {
                            throw new Exception($"{ln}at RenciService.Directory.Exists(_localPath) returns false;{ln}_localPath:{_localPath};{ln};");
                        }
                        try
                        {
                            SftpFileAttributes attribs = client.GetAttributes(_hostPath);
                            if (!attribs.IsDirectory)
                            {
                                throw new Exception($"{ln}at RenciService.GetService attribs.IsDirectory returns false;{ln}_hostPath:{_hostPath};{ln};");
                            }
                        }
                        catch (AggregateException exs)
                        {
                            string exsMessage = $"{ln}at SftpFileAttributes attribs = client.GetAttributes(_hostPath), check directory(_hostPath) exists;{ln}_hostPath:{_hostPath};{ln}";
                            throw new AggregateException(exsMessage, exs.InnerException);
                        }
                        catch (Exception ex)
                        {
                            string exMessage = $"{ln}at SftpFileAttributes attribs = client.GetAttributes(_hostPath), check directory(_hostPath) exists;{ln}_hostPath:{_hostPath};{ln}";
                            throw new Exception(exMessage, ex.InnerException);
                        }

                        IEnumerable<ISftpFile> hostPath_files = client.ListDirectory(_hostPath);
                        if (hostPath_files == null)
                        {
                            ILogger logger = new FileLogger(_logFilePath, 5);
                            logger.LogInformation($"No files found in _hostPath:{_hostPath}");
                        };

                        foreach (ISftpFile file in hostPath_files)
                        {
                            if (file.Name != "." && file.Name != ".." && !file.IsDirectory && Regex.IsMatch(file.Name, WildCardToRegular(_filePattern)) && file.IsRegularFile)
                            {
                                var fileLocalPath = Path.Combine(_localPath, file.Name);
                                var fileHostPath = $"{_hostPath}/{file.Name}";

                                try
                                {
                                    var hostFileAttrib = client.GetAttributes(fileHostPath);
                                    var modTimeHost = hostFileAttrib.LastWriteTime;
                                    var modTimeLocal = File.GetLastWriteTime(fileLocalPath);
                                    if ((!_canOverride && _doDelete && (modTimeHost > modTimeLocal)) || //user trying to delete source and not overwrite target file, ignore
                                        (_canOverride))
                                    {
                                        var fs = File.Create(Path.Combine(_localPath, file.Name), _bufferSize, FileOptions.None);
                                        client.DownloadFile(fileHostPath, fs);
                                        fs.Flush();
                                        fs.Close();
                                        fs.Dispose();
                                    }
                                    else
                                    {
                                        //continue
                                    }
                                }
                                catch (AggregateException exs) { throw exs; }
                                catch (Exception ex) { throw ex; }

                                if (_doDelete)
                                {
                                    try
                                    {
                                        file.Delete();
                                        if ((_doDelete) && (!_canOverride))
                                        {
                                            ILogger logger = new FileLogger(_logFilePath);
                                            logger.LogInformation($"_doDelete is {_doDelete} and _canOverride is {_canOverride}.");
                                        }
                                    }
                                    catch (AggregateException exs) { throw exs; }
                                    catch (Exception ex) { throw ex; }
                                }
                            }
                            else if (!file.IsRegularFile && file.Name != "." && file.Name != ".." && !file.IsDirectory)
                            {
                                ILogger logger = new FileLogger(_logFilePath);
                                logger.LogInformation($"File:{file.Name} is not RegularFile");
                            }
                            else if (file.Name != "." && file.Name != ".." && !file.IsDirectory && file.IsRegularFile)
                            {
                                ILogger logger = new FileLogger(_logFilePath);
                                logger.LogInformation($"File:{file.Name}, does not match _filePattern:{_filePattern} in _hostPath:{_hostPath}");
                            }
                            else
                            {
                                //continue
                            }
                        }
                    }
                    catch (AggregateException exs) { throw exs; }
                    catch (Exception ex) { throw ex; }
                }
                else
                {
                    //send files from windows server localPath to sftp hostPath
                    try
                    {
                        if (!client.Exists(_hostPath))
                        {
                            string _message = $"{ln}at RenciService.GetService client.Exists(_hostPath) is false;{ln}_hostAddress:{_hostPath};{ln}_hostAddress:{_hostAddress};{ln}";
                            throw new Exception(_message);
                        }
                        try
                        {
                            DirectoryInfo di = new DirectoryInfo(_localPath);
                            FileInfo[] filesInLocalPath = di.GetFiles(searchPattern: _filePattern, searchOption: SearchOption.TopDirectoryOnly);
                            if (filesInLocalPath.Length == 0)
                            {
                                ILogger logger = new FileLogger(_logFilePath);
                                logger.LogInformation($"No files found at _localPath:{_localPath} for _filePattern:{_filePattern}");
                            }
                            else
                            {
                                foreach (FileInfo fileName in filesInLocalPath)
                                {
                                    string fileLocalPath = Path.Combine(_localPath, fileName.ToString());
                                    IsFileNotLocked(fileLocalPath);
                                    string fileHostPath = string.Format($"{_hostPath}/{fileName}");
                                    Action<ulong> _uploadCallback = null;

                                    FileStream fileStreamLocal = File.OpenRead(fileLocalPath);
                                    try
                                    {
                                        if (_canOverride)
                                        {
                                            client.UploadFile(fileStreamLocal, fileHostPath, _uploadCallback);
                                        }
                                        else
                                        {
                                            ILogger logger = new FileLogger(_logFilePath);
                                            logger.LogInformation($"File {fileLocalPath} was not uploaded to _hostPath:{_hostPath} because _canOverride:{_canOverride}");
                                        }
                                    }
                                    catch (AggregateException exs)
                                    {
                                        string _message = $"{ln}{exs.Message}{ln}at RenciService.GetService.client.UploadFile failed to send fileLocalPath:{fileLocalPath} to filehostPath:{fileHostPath};{ln}bytes sent:{(_uploadCallback.ToString() ?? "0")}";
                                        throw new AggregateException(_message, exs.InnerExceptions);
                                    }
                                    catch (Exception ex)
                                    {
                                        string _message = $"{ln}{ex.Message}{ln}at RenciService.GetService.client.UploadFile failed to send fileLocalPath:{fileLocalPath} to filehostPath:{fileHostPath};{ln}bytes sent:{(_uploadCallback.ToString() ?? "0")}";
                                        throw new Exception(_message, ex.InnerException);
                                    }
                                    fileStreamLocal.Close();
                                    fileStreamLocal.Dispose();
                                    if (_doDelete)
                                    {
                                        if (File.Exists(path: fileLocalPath.ToString()))
                                        {
                                            IsFileNotLocked(filepath: fileLocalPath.ToString());
                                            File.Delete(path: fileLocalPath.ToString());
                                        };
                                    }
                                }
                            }
                        }
                        catch (AggregateException exs) { throw exs; }
                        catch (Exception ex) { throw ex; }
                    }
                    catch (AggregateException exs) { throw exs; }
                    catch (Exception ex) { throw ex; }
                }
                client.Disconnect();
                client.Dispose();
            }
            catch (AggregateException exs) { throw exs; }
            catch (Exception ex) { throw ex; }
        }

        private static string WildCardToRegular(string value) => Regex.Escape(value).Replace("\\?", ".").Replace("\\*", ".*") + "$";

        private static bool IsFileNotLocked(string filepath, int itrys = 6, int waittime = 100)
        {
            //checks path for filepath lock and returns error if path is not a filepath/not found and false if filepath stays locked past waittime
            try
            {
                bool is_available = false;
                int i = 0;

                FileAttributes attr = File.GetAttributes(filepath);
                if ((attr & FileAttributes.Normal) == FileAttributes.Normal | (attr & FileAttributes.Archive) == FileAttributes.Archive)
                {
                    while (i < itrys && !is_available)
                    {
                        try
                        {
                            FileInfo file_i = new FileInfo(filepath);
                            FileStream stream = file_i.Open(FileMode.Open, FileAccess.Read, FileShare.None);
                            stream.Close();
                            stream = null;
                            is_available = true;
                        }
                        catch (IOException)
                        {
                            is_available = false;
                            Thread.Sleep(waittime);
                        };
                        i++;
                    }
                }
                else
                {
                    is_available = false;
                    string _message = $"{ln}at RenciService.IsfilenameLocked;{ln}Lock on file not available due to outside lock after waittime:{waittime};";
                    throw new FileNotFoundException(_message);
                }
                return is_available;
            }
            catch (AggregateException exs) { throw exs; }
            catch (Exception ex) { throw ex; }
        }
    }

    //c# script copy within namespace
    //**************************************************
}]]></ProjectItem>
          <ProjectItem
            Name="app.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-8.0.0.0" newVersion="8.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Threading.Tasks.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.2.0.1" newVersion="4.2.0.1" />
			</dependentAssembly>
		</assemblyBinding>
	</runtime>
</configuration>]]></ProjectItem>
          <BinaryItem
            Name="ST_d3b799b5e720451a94e08b19ba6086d4.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAOzgImYAAAAAAAAAAOAAIiALATAAAEoAAAAIAAAAAAAAgmgA
AAAgAAAAgAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAADAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAADBoAABPAAAAAIAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAKAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAiEgAAAAgAAAASgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAgAAAAAYAAABMAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAKAAAAACAAAAUgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABk
aAAAAAAAAEgAAAACAAUA0DkAAKgtAAABAAAAAAAAAHhnAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBAAhAAAAAQAAEQNvEAAACt4YCgIGBAUoAgAABt4MCwIH
BAUoAwAABt4AKgAAAAEcAAAAAAAACAgADA8AAAEAAAAACBQADBAAAAEbMAQAjgAAAAIAABEELEQc
jSkAAAElFgJ7AQAABKIlF3IBAABwoiUYAnsBAAAEoiUZA28RAAAKoiUach0AAHCiJRsCewEAAASi
KBIAAAooEwAACgNvFAAACm8VAAAKCiskBm8WAAAKCwQsGnIhAABwB28RAAAKch0AAHAoFwAACigT
AAAKBm8YAAAKLdTeCgYsBgZvGQAACtwqAAABEAAAAgBTADCDAAoAAAAAfgQsGwJ7AQAABANvEQAA
CnIdAABwKBcAAAooEwAACipKAigaAAAKfQEAAAQCKBsAAAoqngIoGgAACn0FAAAEAigbAAAKAgN9
AgAABAIEfQMAAAQCBX0EAAAEKjYCclcAAHADKAwAAAYqNgJyYQAAcAMoDAAABio2AnJxAABwAygM
AAAGKgAAABswBQDWAgAAAwAAEXJ9AABwGo0NAAABJRYoHAAACowSAAABoiUXA6IlGASiJRkoGgAA
CqIoHQAACgoCewIAAAQoHgAACjoEAQAAAnsCAAAEKB8AAAoLAnsCAAAEKCAAAAoMCCghAAAKLQcI
KCIAAAomAnsCAAAEKCMAAAotNAJ7AgAABBYoJAAACgJ7AwAABHMlAAAKJQZvJgAACiVvJwAACiVv
KAAACm8pAAAKOJwAAAAoHAAACgcoKgAACgJ7BAAABGwoKwAACigsAAAKLDECewIAAAQXKCQAAAoC
ewMAAARzJQAACiUGbyYAAAolbycAAAolbygAAApvKQAACitNKBwAAAoHKCoAAAoCewQAAARsKCsA
AAooLQAACiwvAnsCAAAEFigkAAAKAnsDAAAEcyUAAAolBm8mAAAKJW8nAAAKJW8oAAAKbykAAArd
jgEAAA0fFo0pAAABJRYCewUAAASiJRdyywAAcKIlGAJ7BQAABKIlGXIBAQBwoiUaCW8RAAAKoiUb
ch0AAHCiJRwCewUAAASiJR1yKQEAcKIlHgJ7AgAABKIlHwlyHQAAcKIlHwoCewUAAASiJR8LckUB
AHCiJR8MA6IlHw1yHQAAcKIlHw4CewUAAASiJR8PclkBAHCiJR8QBKIlHxFyHQAAcKIlHxICewUA
AASiJR8TCW8RAAAKoiUfFHIdAABwoiUfFQJ7BQAABKIoEgAACglvFAAACnMuAAAKehMEHxKNKQAA
ASUWAnsFAAAEoiUXcssAAHCiJRgCewUAAASiJRlyawEAcKIlGhEEbxEAAAqiJRtyHQAAcKIlHAJ7
BQAABKIlHXJFAQBwoiUeA6IlHwlyHQAAcKIlHwoCewUAAASiJR8LclkBAHCiJR8MBKIlHw1yHQAA
cKIlHw4CewUAAASiJR8PEQRvEQAACqIlHxByHQAAcKIlHxECewUAAASiKBIAAAoRBG8vAAAKczAA
AAp6KgAAQTQAAAAAAAAuAAAAGQEAAEcBAADYAAAADwAAAQAAAAAuAAAAGQEAAB8CAAC2AAAAEAAA
ARswBQDaAAAABAAAERQKAgNvMQAACgISAG8yAAAKBgNvMwAACgRvNAAACgZvNQAACt2wAAAAC3KB
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
AgAAAAMAAAAEAAAABAAAAAEAAAAFAAAAAQAAAAIAAAABAAAAAACVBwEAAAAAAAYAOwULCgYAygUL
CgYAhwT4CQ8AfwoAAAYAtAR3CAYAHgV3CAYA/wR3CAYAsQV3CAYAWwV3CAYAdAV3CAYAywR3CAYA
5gRQBgYAAQzRBwYAYQjRBwYAuAjRBwYA1AjRBwYATgDMAAYA8wLRBwoArAPdBg4AlAkfAw4AwAof
AxIABgkjDAYAvQeSABIAXgEjDAYADAjRBxIAVgwjDBIAfQIxCQYA6wiSAAYAMADRBwYA1wqSAAYA
lgiSAAoAjwXdBgYA2AfRBwYATwQLCgYAagT4CQYAWQkrCgYA9AhMCBYA9QN2BxYAmwR2BxYAyAM3
CAYAdwbRBwYAvwLRBwYAOQBFBwYAIgDMAAYA0QkcCwYANQLRBwYAYQzRBwYAswKSAAYAqQaSAAYA
7gySAAYAFQmSAAYARwaIDAYApgmSAAYAswmSAA4ALAIfAwYAtwzRBwYA6gGSAAYAaAuSABIAVAEj
DBIAywEjDBIAmQIjDAYAwQeSABIANwEjDAYAXADRBxIASwwjDBIA0woxCRYAsQz9CgYALwuSAAYA
6QfRBwYAiQiSAAYAcgOSAAYA/AA2BgYAogiSAAoAZAfdBgoAfAndBgYAjwDRBwYAwQvRBwYAbQPR
BwYAQQLRBwYAwQx3CAAAAACGAAAAAAABAAEAAQAQAHsLYgA1AAEAAQChABAAaQliAAAAAgAFAAEA
EABxCWIANQACAAgAAQAQAIUBYgBNAAYADQCBARAAkQFiADUABwARAAEAEAAaCGIATQAIABYAAAAQ
ADIKjgo1ABcAGAAAARAA9AqOCqEAGQAcAAMBAAChCwAAhQAaAB8AAwEQAAEAAAA1AB0AHwAhACUI
bgIhAIwGbgIhABYGFAMhAOMLFAMhACUIbgIRACUIbgIxACUIbgIhACUIbgIBAI0GbgIBAI0LbgIB
AKUGbgIBAN8IbgIBANkCbgIBAHQBbgIBAJoGbgIBAHoMFAMBAAwGFwMBAKkCbgIBAAsEFwMBAN4B
FwMBADMHFAMBACsGFAMRAN0HGgMRAJwDHwMRALsBJAMGBrsAFANWgHMLKANWgHwDKAMGANYLLANQ
IAAAAACGAJ4BMAMBAJwgAAAAAIQAKgQ4AwQASCEAAAAAhAAzBEADBwBoIQAAAACGGOsJBgAKAAAA
AAAAAMYFKAgQAAoAAAAAAAAAxgVqBhAACwAAAAAAAADGBcgJEAAMAHshAAAAAIYY6wlIAw0AoyEA
AAAA5gEoCBAAEACxIQAAAADmAWoGEAARAL8hAAAAAOYByAkQABIA0CEAAAAAgQCUDEcBEwDoJAAA
AACWACcCTwMVAOwlAAAAAIYAGgJXAxgAOCYAAAAAhhjrCQYAGgBAJgAAAACRGPEJegIaAEwmAAAA
AJEAAAleAxoAMCgAAAAAlgCwAWgDHwDkMQAAAACRAEMJlQAtABQyAAAAAJEAAwF6Ay4AyDIAAAAA
kRjxCXoCMQDUMgAAAACGACAIBgAxAMQ4AAAAAIYY6wkGADEAajkAAAAAgxjrCQYAMQByOQAAAACT
CFUJgQMxAJ45AAAAAJMIhAOHAzEApTkAAAAAkwiQA40DMQCtOQAAAACWCDAMlAMyALQ5AAAAAIYY
6wkGADIAvDkAAAAAkRjxCXoCMgBqOQAAAACGGOsJBgAyAMg5AAAAAIMAFwAGADIAAAABAHAIAAAC
ALgCAAADAI0GAAABAKsMAAACALgCAAADAI0GAAABALQMAAACALgCAAADAI0GAAABAAsCAAABAAsC
AAABAAsCEBABAI0GEBACABcGEBADAOQLAAABAAsCAAABAAsCAAABAAsCAAABAIwHAAACAAsCAAAB
ACkJAAACANACAAADAPwFAAABACkJAAACANACAAABAKkCAAACAI0LAAADAHoMAAAEANkCAAAFAHQB
AAABAIwLAAACAKQGAAADAN4IAAAEANgCAAAFAHMBAAAGAJkGAAAHAHkMAAAIAAsGEBAJAKgCEBAK
AAoEEBALAN0BEBAMADIHEBANACoGEBAOAIwGAAABAAUGAAABAK4GEBACAO0LEBADAD8DAAABAAUG
BAAMAAkA6wkBABEA6wkGABkA6wkKACkA6wkQADEA6wkQADkA6wkQAEEA6wkQAEkA6wkQAFEA6wkQ
AFkA6wkQAGEA6wkQAAEB6wkGABEB6wkGABkB6wkGADkB6wkVAHEAEwIGAIEA/wEuAEkB8wsyAFEB
SAM4AHkAOws9AAwA3QlPABQAbQxfAEkB8wtkAGkBfwxrAHEB5gMGAHkBUgNvAGkA6wkGAJEAowx+
AEkB+guDAEkBBg2KAIEBDgOPAIkB4gKVAJEBuguKAJEBygyaAIEBuguKAKEB8wGhAKkB6wmnALEB
SQQQALEBhgYGALEB4AMGALEB5gMGAJEAaAixAMkA2gu6AMkAAAjAAMkABgfAAHkA6wnIAIEAywjU
AIEA6wnZAKEAQgQQAKEAvQrpAKkAyAfwALkB8gX3AKkAtwYGAMEBDg38AHkA6wnZAKEA8AAQALkB
6AUNAZkA6wkGALkA6wkhAekB6wksAdkB6wk0AbEA6wk9AfkB6wlHAckA6wmCAdEA6wmHAQkCHAeN
AQkCEAwGAAkCJwFrALEAEwFrAIEA6wkQANEA5gqTAREC2gxrANEA6gyaAUkB8wuqARwA3QlPACQA
bQxfANkAxwIuAEkB+Ay/AdkA2gxrABkCfga/AdkAhwJrAIkBXgOqAREC/ALFAZEA8QfKAYEB7gPS
AdEAZQLcAfEBhgYGAPEB4AMGAPEB5gMGANkADQQGAEkB+gvpAdEAugvwAZkB6wkQAJkBygr1AUkB
8wv/AWkAdQYuAIEB5wAHAtEAcgINAkkB+gsaAoEBDQQ4AAkCGAwGAAkC5gMGABkCZgOVAEkBfQEi
AoEB5gowAuEA6wkQAOEAFQg2AkECIwlEAkkC6wkQAJkAmQtXAlECkAldAnEA6wliAlECrwtoAkkB
Dg1uAlkCvglxAlECPAwBAGECCAx6AmECTwt6AmECFAR+AnECUwKEAnECvQyNAiEB6wmTAkEB6wkG
AA4ANQAAAAgAOQDAAggAPQDFAggAbAC2AggAcAC7Ag4AnQAAAAIAoQDKAgIApQDKAgoAqQDMAggA
rQDAAg4AsQDVAggAvQAKAwgAwQAPAykAewDSAy4ACwCqAy4AEwCzAy4AGwDSAy4AIwDbAy4AKwAE
BC4AMwAEBC4AOwAEBC4AQwDbAy4ASwAKBC4AUwAEBC4AWwAhBEkAewDSA+MAYwC7AgMBcwC7AmMB
awC7AiEDawC7AhwAIwBzAOAABwERAU0BKAJJAggAAQAJAAMAAABZCZkDAACkA58DAAA0DKUDAgAZ
AAMAAgAaAAUAAQAbAAUAAgAcAAcARwBYALABuAEEgAAAAQAAAKsiPmUAAAAAAABiAAAABAAAAAAA
AAAAAAAAmwLDAAAAAAAQAAAAAAAAAAAAAACkAr4GAAAAABAAAAAAAAAAAAAAAKQCnAAAAAAA5wcA
AAAAAAAAAAAArQIjDAAAAAAEAAAAAAAAAAAAAACbAtEHAAAAAAAAAAABAAAAPAoAAAoABwALAAcA
bQADAQAAAAAAPD5jX19EaXNwbGF5Q2xhc3MxNV8wADxNYWluPmJfXzAASUVudW1lcmFibGVgMQBB
Y3Rpb25gMQBSZWFkT25seUNvbGxlY3Rpb25gMQBJRW51bWVyYXRvcmAxAEludDMyAFNUX2QzYjc5
OWI1ZTcyMDQ1MWE5NGUwOGIxOWJhNjA4NmQ0ADxNb2R1bGU+AEdDAFN5c3RlbS5JTwBNaWNyb3Nv
ZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAdmFsdWVfXwBtc2NvcmxpYgBTeXN0ZW0uQ29sbGVjdGlv
bnMuR2VuZXJpYwBPcGVuUmVhZABMb2NrRm9yUmVhZABUaHJlYWQASXNGaWxlTm90TG9ja2VkAGdl
dF9Jc0F1dGhlbnRpY2F0ZWQAZ2V0X0lzQ29ubmVjdGVkAFBhc3N3b3JkQXV0aGVudGljYXRpb25N
ZXRob2QAUHJpdmF0ZUtleUF1dGhlbnRpY2F0aW9uTWV0aG9kAF9wYXNzV29yZABSZXBsYWNlAFNT
SVNTZXJ2aWNlAFJlbmNpU2VydmljZQBFeGNlcHRpb25zU2VydmljZQBHZXRTZXJ2aWNlAGRlZmF1
bHRJbnN0YW5jZQBJUHJpdmF0ZUtleVNvdXJjZQBfY2FuT3ZlcnJpZGUARmlsZU1vZGUAZ2V0X1Vu
aWNvZGUAZ2V0X01lc3NhZ2UAbWVzc2FnZQBJbnZva2UAUmVhZFZhcmlhYmxlAFdyaXRlVmFyaWFi
bGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARG93bmxv
YWRGaWxlAFVwbG9hZEZpbGUASVNmdHBGaWxlAGdldF9Jc1JlZ3VsYXJGaWxlAFByaXZhdGVLZXlG
aWxlAF9wcml2YXRlS2V5RmlsZQB3cml0ZVRvQ29uc29sZQBnZXRfTmFtZQB2YXJOYW1lAF91c2Vy
TmFtZQBHZXREaXJlY3RvcnlOYW1lAERhdGVUaW1lAGdldF9MYXN0V3JpdGVUaW1lAEdldExhc3RX
cml0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQB3YWl0dGltZQBXcml0ZUxp
bmUAZ2V0X05ld0xpbmUAQ29tYmluZQBFc2NhcGUAVHlwZQBGaWxlU2hhcmUARmFpbHVyZQBnZXRf
Q3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9k
ZWxCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UAQ3JlYXRlAEVkaXRv
ckJyb3dzYWJsZVN0YXRlAF9kb0RlbGV0ZQBXYWl0Rm9yRnVsbEdDQ29tcGxldGUAQWdncmVnYXRl
RXhjZXB0aW9uV3JpdGUATG9ja0ZvcldyaXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERl
YnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93
c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0
dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0
cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9u
c0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRy
aWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0
dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVl
AHZhclZhbHVlAHZhbHVlAF9pc1JlY2VpdmUAX2FsbG9jYXRlQnVmZmVyU2l6ZQBfYnVmZmVyU2l6
ZQBTeXN0ZW0uVGhyZWFkaW5nAEVuY29kaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcATG9n
V2FybmluZwBUb1N0cmluZwBJc01hdGNoAEZsdXNoAF9sb2dGaWxlUGF0aABfbG9jYWxQYXRoAF9o
b3N0UGF0aABmaWxlcGF0aABVbmxvY2sATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAb3BfR3JlYXRlclRoYW5PckVx
dWFsAHNldF9LZWVwQWxpdmVJbnRlcnZhbABfa2VlcEFsaXZlSW50ZXJ2YWwAU3lzdGVtLkNvbGxl
Y3Rpb25zLk9iamVjdE1vZGVsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2Rl
bABsb2dMZXZlbABTVF9kM2I3OTliNWU3MjA0NTFhOTRlMDhiMTliYTYwODZkNC5kbGwARmlsZVN0
cmVhbQBnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBCb29sZWFuAG9wX0dyZWF0ZXJU
aGFuAG9wX0xlc3NUaGFuAFRpbWVTcGFuAE9wZW4AU2NyaXB0TWFpbgBsbgBMb2dJbmZvcm1hdGlv
bgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBBY3Rpb24Ab3BfU3Vi
dHJhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24AU2VhcmNoT3B0aW9uAElPRXhjZXB0aW9uAEZpbGVO
b3RGb3VuZEV4Y2VwdGlvbgBBZ2dyZWdhdGVFeGNlcHRpb24AZ2V0X0lubmVyRXhjZXB0aW9uAF9m
aWxlUGF0dGVybgBGaWxlSW5mbwBDdWx0dXJlSW5mbwBDcmVhdGVDb25uZWN0aW9uSW5mbwBEaXJl
Y3RvcnlJbmZvAFNsZWVwAHZhckRpc3AAUmVuY2kuU3NoTmV0LlNmdHAAV2lsZENhcmRUb1JlZ3Vs
YXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBJTG9nZ2VyAEZpbGVMb2dnZXIARXZlbnRzT2JqZWN0V3Jh
cHBlcgBnZXRfVmFyaWFibGVEaXNwZW5zZXIAU3RyZWFtV3JpdGVyAFRleHRXcml0ZXIARmlyZUVy
cm9yAExvZ0Vycm9yAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3Rl
bS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNv
dXJjZXMAU1RfZDNiNzk5YjVlNzIwNDUxYTk0ZTA4YjE5YmE2MDg2ZDQuUHJvcGVydGllcy5SZXNv
dXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUX2QzYjc5OWI1ZTcyMDQ1MWE5NGUwOGIx
OWJhNjA4NmQ0LlByb3BlcnRpZXMAR2V0VmFyaWFibGVzAEdldEZpbGVzAFNmdHBGaWxlQXR0cmli
dXRlcwBHZXRBdHRyaWJ1dGVzAFNldHRpbmdzAFN5c3RlbS5UZXh0LlJlZ3VsYXJFeHByZXNzaW9u
cwBTeXN0ZW0uQ29sbGVjdGlvbnMARmlsZU9wdGlvbnMAZ2V0X0lubmVyRXhjZXB0aW9ucwBXYWl0
Rm9yUGVuZGluZ0ZpbmFsaXplcnMARmlsZUFjY2VzcwBTdWNjZXNzAEV4Y2VwdGlvblByb2Nlc3MA
X2hvc3RBZGRyZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBnZXRfRXZlbnRzAEV4aXN0cwBHQ05v
dGlmaWNhdGlvblN0YXR1cwBleHMARnJvbURheXMAX2tlZXBEYXlzAGl0cnlzAENvbmNhdABGb3Jt
YXQAT2JqZWN0AENvbGxlY3QAQ29ubmVjdABEaXNjb25uZWN0AFJlbmNpLlNzaE5ldABnZXRfRGVm
YXVsdABzZXRfVGFza1Jlc3VsdABCYXNlQ2xpZW50AFNmdHBDbGllbnQARW52aXJvbm1lbnQAZ2V0
X0N1cnJlbnQAX3BvcnQATW92ZU5leHQAU3lzdGVtLlRleHQATG9nTWVzc2FnZVRleHQAZ2V0X05v
dwBhZ2dFeABSZWdleABBcnJheQBnZXRfQXNzZW1ibHkAQ3JlYXRlRGlyZWN0b3J5AGdldF9Jc0Rp
cmVjdG9yeQBMaXN0RGlyZWN0b3J5AG9wX0luZXF1YWxpdHkASXNOdWxsT3JFbXB0eQAAG0UAeABj
AGUAcAB0AGkAbwBuACgAcwApADoAAAM7AAA1RgBvAGwAbABvAHcAaQBuAGcAIABJAG4AbgBlAHIA
IABFAHgAYwBlAHAAdABpAG8AbgA6AAAJSQBOAEYATwAAD1cAQQBSAE4ASQBOAEcAAAtFAFIAUgBP
AFIAAE1bAHsAMAA6AHkAeQB5AHkALQBNAE0ALQBkAGQAIABIAEgAOgBtAG0AOgBzAHMAfQBdACAA
WwB7ADEAfQBdACAAewAyAH0AewAzAH0AATVhAHQAIABJAEwAbwBnAGcAZQByAC4ATABvAGcATQBl
AHMAcwBhAGcAZQBUAGUAeAB0ADsAACdBAGcAZwByAGUAZwBhAHQAZQBFAHgAYwBlAHAAdABpAG8A
bgA6AAAbXwBsAG8AZwBGAGkAbABlAFAAYQB0AGgAOgAAE2wAbwBnAEwAZQB2AGUAbAA6AAARbQBl
AHMAcwBhAGcAZQA6AAAVRQB4AGMAZQBwAHQAaQBvAG4AOgAAgJt7ADAAfQBFAHgAYwBlAHAAdABp
AG8AbgAgAFMAUwBJAFMAUwBlAHIAdgBpAGMAZQAuAFcAcgBpAHQAZQBWAGEAcgBpAGEAYgBsAGUA
OgB7ADEAfQB7ADIAfQA7AHsAMwB9AHYAYQByAE4AYQBtAGUAOgB7ADQAfQA7AHsANQB9AHYAYQBy
AFYAYQBsAHUAZQA6AHsANgB9ADsAAF9FAHgAYwBlAHAAdABpAG8AbgAgAGkAbgAgAFIAZQBuAGMA
aQBTAGUAcgB2AGkAYwBlAC4AQwByAGUAYQB0AGUAQwBvAG4AbgBlAGMAdABpAG8AbgBJAG4AZgBv
ADsAAB9wAHIAaQB2AGEAdABlAEsAZQB5AEYAaQBsAGUAOgAAgJV7ADAAfQBoAG8AcwB0AEEAZABk
AHIAZQBzAHMAOgB7ADEAfQA7AHsAMgB9AHAAbwByAHQAOgB7ADMAfQA7AHsANAB9AHUAcwBlAHIA
bgBhAG0AZQA6AHsANQB9ADsAewA2AH0AcABhAHMAcwB3AG8AcgBkADoAewA3AH0AOwB7ADgAfQB7
ADkAfQA7AHsAMQAwAH0AAEtFAHgAYwBlAHAAdABpAG8AbgAgAGEAdAAgAFIAZQBuAGMAaQBTAGUA
cgB2AGkAYwBlAC4ARwBlAHQAUwBlAHIAdgBpAGMAZQA7AABFYwBsAGkAZQBuAHQALgBJAHMAQwBv
AG4AbgBlAGMAdABlAGQAIAByAGUAdAB1AHIAbgBlAGQAIABmAGEAbABzAGUAOwAAgJt7ADAAfQB7
ADEAfQA7AHsAMgB9AF8AaABvAHMAdABBAGQAZAByAGUAcwBzADoAewAzAH0AOwB7ADQAfQBfAHAA
bwByAHQAOgB7ADUAfQA7AHsANgB9AF8AdQBzAGUAcgBOAGEAbQBlADoAewA3AH0AOwB7ADgAfQBf
AHAAYQBzAHMAVwBvAHIAZAA6AHsAOQB9AHsAMQAwAH0AAE1jAGwAaQBlAG4AdAAuAEkAcwBBAHUA
dABoAGUAbgB0AGkAYwBhAHQAZQBkACAAcgBlAHQAdQByAG4AZQBkACAAZgBhAGwAcwBlADsAAHdh
AHQAIABSAGUAbgBjAGkAUwBlAHIAdgBpAGMAZQAuAEQAaQByAGUAYwB0AG8AcgB5AC4ARQB4AGkA
cwB0AHMAKABfAGwAbwBjAGEAbABQAGEAdABoACkAIAByAGUAdAB1AHIAbgBzACAAZgBhAGwAcwBl
ADsAABdfAGwAbwBjAGEAbABQAGEAdABoADoAAHthAHQAIABSAGUAbgBjAGkAUwBlAHIAdgBpAGMA
ZQAuAEcAZQB0AFMAZQByAHYAaQBjAGUAIABhAHQAdAByAGkAYgBzAC4ASQBzAEQAaQByAGUAYwB0
AG8AcgB5ACAAcgBlAHQAdQByAG4AcwAgAGYAYQBsAHMAZQA7AAAVXwBoAG8AcwB0AFAAYQB0AGgA
OgAAgMdhAHQAIABTAGYAdABwAEYAaQBsAGUAQQB0AHQAcgBpAGIAdQB0AGUAcwAgAGEAdAB0AHIA
aQBiAHMAIAA9ACAAYwBsAGkAZQBuAHQALgBHAGUAdABBAHQAdAByAGkAYgB1AHQAZQBzACgAXwBo
AG8AcwB0AFAAYQB0AGgAKQAsACAAYwBoAGUAYwBrACAAZABpAHIAZQBjAHQAbwByAHkAKABfAGgA
bwBzAHQAUABhAHQAaAApACAAZQB4AGkAcwB0AHMAOwAAOU4AbwAgAGYAaQBsAGUAcwAgAGYAbwB1
AG4AZAAgAGkAbgAgAF8AaABvAHMAdABQAGEAdABoADoAAAMuAAAFLgAuAAADLwAAU18AZABvAEQA
ZQBsAGUAdABlACAAaQBzACAAewAwAH0AIABhAG4AZAAgAF8AYwBhAG4ATwB2AGUAcgByAGkAZABl
ACAAaQBzACAAewAxAH0ALgAAC0YAaQBsAGUAOgAAJyAAaQBzACAAbgBvAHQAIABSAGUAZwB1AGwA
YQByAEYAaQBsAGUAAD0sACAAZABvAGUAcwAgAG4AbwB0ACAAbQBhAHQAYwBoACAAXwBmAGkAbABl
AFAAYQB0AHQAZQByAG4AOgAAHSAAaQBuACAAXwBoAG8AcwB0AFAAYQB0AGgAOgAAe2EAdAAgAFIA
ZQBuAGMAaQBTAGUAcgB2AGkAYwBlAC4ARwBlAHQAUwBlAHIAdgBpAGMAZQAgAGMAbABpAGUAbgB0
AC4ARQB4AGkAcwB0AHMAKABfAGgAbwBzAHQAUABhAHQAaAApACAAaQBzACAAZgBhAGwAcwBlADsA
ABtfAGgAbwBzAHQAQQBkAGQAcgBlAHMAcwA6AAA7TgBvACAAZgBpAGwAZQBzACAAZgBvAHUAbgBk
ACAAYQB0ACAAXwBsAG8AYwBhAGwAUABhAHQAaAA6AAAlIABmAG8AcgAgAF8AZgBpAGwAZQBQAGEA
dAB0AGUAcgBuADoAAA97ADAAfQAvAHsAMQB9AACAh0YAaQBsAGUAIAB7ADAAfQAgAHcAYQBzACAA
bgBvAHQAIAB1AHAAbABvAGEAZABlAGQAIAB0AG8AIABfAGgAbwBzAHQAUABhAHQAaAA6AHsAMQB9
ACAAYgBlAGMAYQB1AHMAZQAgAF8AYwBhAG4ATwB2AGUAcgByAGkAZABlADoAewAyAH0AAICVYQB0
ACAAUgBlAG4AYwBpAFMAZQByAHYAaQBjAGUALgBHAGUAdABTAGUAcgB2AGkAYwBlAC4AYwBsAGkA
ZQBuAHQALgBVAHAAbABvAGEAZABGAGkAbABlACAAZgBhAGkAbABlAGQAIAB0AG8AIABzAGUAbgBk
ACAAZgBpAGwAZQBMAG8AYwBhAGwAUABhAHQAaAA6AAAjIAB0AG8AIABmAGkAbABlAGgAbwBzAHQA
UABhAHQAaAA6AAAXYgB5AHQAZQBzACAAcwBlAG4AdAA6AAADMAAABVwAPwAABVwAKgAABS4AKgAA
AyQAAIDTewAwAH0AYQB0ACAAUgBlAG4AYwBpAFMAZQByAHYAaQBjAGUALgBJAHMAZgBpAGwAZQBu
AGEAbQBlAEwAbwBjAGsAZQBkADsAewAxAH0ATABvAGMAawAgAG8AbgAgAGYAaQBsAGUAIABuAG8A
dAAgAGEAdgBhAGkAbABhAGIAbABlACAAZAB1AGUAIAB0AG8AIABvAHUAdABzAGkAZABlACAAbABv
AGMAawAgAGEAZgB0AGUAcgAgAHcAYQBpAHQAdABpAG0AZQA6AHsAMgB9ADsAACNVAHMAZQByADoA
OgBoAG8AcwB0AEEAZABkAHIAZQBzAHMAAB1VAHMAZQByADoAOgBoAG8AcwB0AFAAYQB0AGgAACNV
AHMAZQByADoAOgBmAGkAbABlAFAAYQB0AHQAZQByAG4AAB1VAHMAZQByADoAOgB1AHMAZQByAE4A
YQBtAGUAAB1VAHMAZQByADoAOgBwAGEAcwBzAFcAbwByAGQAAB9VAHMAZQByADoAOgBsAG8AYwBh
AGwAUABhAHQAaAAAFVUAcwBlAHIAOgA6AHAAbwByAHQAAB9VAHMAZQByADoAOgBpAHMAUgBlAGMA
ZQBpAHYAZQAAI1UAcwBlAHIAOgA6AGwAbwBnAEYAaQBsAGUAUABhAHQAaAAAKVUAcwBlAHIAOgA6
AHAAcgBpAHYAYQB0AGUASwBlAHkARgBpAGwAZQAAHVUAcwBlAHIAOgA6AGQAbwBEAGUAbABlAHQA
ZQAAI1UAcwBlAHIAOgA6AGMAYQBuAE8AdgBlAHIAcgBpAGQAZQAAL1UAcwBlAHIAOgA6AGsAZQBl
AHAAQQBsAGkAdgBlAEkAbgB0AGUAcgB2AGEAbAAAIVUAcwBlAHIAOgA6AGIAdQBmAGYAZQByAFMA
aQB6AGUAABlmAGkAbABlAFAAYQB0AHQAZQByAG4AOgAABSwAIAAAGWgAbwBzAHQAQQBkAGQAcgBl
AHMAcwA6AAATcABhAHMAcwBXAG8AcgBkADoAAAMsAACAgXsAMAB9AGgAbwBzAHQAUABhAHQAaAA6
AHsAMQB9ACwAIAB7ADIAfQB1AHMAZQByAE4AYQBtAGUAOgB7ADMAfQAsACAAewA0AH0AbABvAGMA
YQBsAFAAYQB0AGgAOgB7ADUAfQAsACAAewA2AH0AcABvAHIAdAA6AHsANwB9ACwAAHN7ADAAfQBp
AHMAUgBlAGMAZQBpAHYAZQA6AHsAMQB9ACwAIAB7ADIAfQBwAHIAaQB2AGEAdABlAEsAZQB5AEYA
aQBsAGUAOgB7ADMAfQAsACAAewA0AH0AZABvAEQAZQBsAGUAdABlADoAewA1AH0ALAAAgKF7ADAA
fQBjAGEAbgBPAHYAZQByAHIAaQBkAGUAOgB7ADEAfQAsAHsAMgB9AGsAZQBlAHAAQQBsAGkAdgBl
AEkAbgB0AGUAcgB2AGEAbAA6AHsAMwB9ACwAewA0AH0AYgB1AGYAZgBlAHIAUwBpAHoAZQA6AHsA
NQB9ACwAewA2AH0AbABvAGcARgBpAGwAZQBQAGEAdABoADoAewA3AH0AACFTAHkAcwB0AGUAbQA6
ADoAVABhAHMAawBOAGEAbQBlAAADOgAANUMAOgBcAHMAZgB0AHAAbABvAGcAZwBpAG4AZwBcAGwA
bwBnAGcAaQBuAGcALgB0AHgAdAAAM2UAdQAtAGMAZQBuAHQAcgBhAGwALQAxAC4AcwBmAHQAcABj
AGwAbwB1AGQALgBpAG8AARsvAHMAZgB0AHAAdAByAGEAbgBzAGYAZQByAAAHKgAuACoAAEFhAGYA
ZQAxADkANwBkAGYAMwA3AGYAMwA0ADIAMAA5ADkAYQBjADUAYQA4ADMAMABjAGQANAAzADMAMwAz
AGEAAEEwAEUAVwA1AGcAZgBLADkAOQBhAE4AVQAwAFoAUgBTAEMAQQBMAEQAUwA4AEEAZAAyADQA
cgA3AEoAcgBUAHoAAB9DADoAXABzAGYAdABwAHQAcgBhAG4AcwBmAGUAcgAAAQBxUwBUAF8AZAAz
AGIANwA5ADkAYgA1AGUANwAyADAANAA1ADEAYQA5ADQAZQAwADgAYgAxADkAYgBhADYAMAA4ADYA
ZAA0AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAABzkJBSH0h9TpwS
9FB/wkMoAAQgAQEIAyAAAQUgAQEREQQgAQEOBiABARGAmQYHAhI9EkEKBwIVEkUBEkESQQMgAA4F
AAEOHQ4EAAEBDgkgABUSgK0BEkEHFRKAsQESQQggABUSRQETAAYVEkUBEkEEIAATAAYAAw4ODg4D
IAACAwAADgoHBQ4RSQ4SPRJBBAAAEUkGAAIODh0cBAABAg4FAAERSQ4EAAEODgYAARKAzQ4FAAAS
gNEJIAQBDgISgNEICAACEWURSRFJBQABEWUNBwACAhFlEWULIAIBDhUSgLEBEkEEIAASQQYgAgEO
EkEIBwMSVRI9EkEGIAEBEBJVBiABEoDdHAQgAQEcBhABAB0eAAMKARwFBwISVRwDIAAcDwcGEl0d
EmESWRJhEj0SQQogAwEOEYDlEYDpByACARKA+Q4IIAIBDh0SgPEJIAQBDggOHRJhBSACAQ4ONAcX
EWUSWRJpEkESPRJBFRJFARJtEm0ODhFJEUkSXR0ScR0ScQgScQ4OFRJ1AQsSXRI9EkEEIAEBCgUg
AQESWQUgAQERZQYgARKBCQ4PIAIVEoCxARJtDhUSdQEIBQACDg4OBxUSgLEBEm0GFRJFARJtBQAC
Ag4OBCAAEUkHAAICEUkRSQkAAxJdDggRgREMIAMBDhKA+RUSdQELBgADDg4cHAQgAQIOCSACHRJx
DhGBGQcABA4ODg4OBQABEl0ODCADARKA+Q4VEnUBCwcABA4OHBwcBSACDg4OBwcEAggReQIFAAER
eQ4NIAMSXRGA5RGA6RGBHQQAAQEIDQcHEhQOEiwSPQ4SQQ4FIAASgSkEIAASUQUgAgEcGAUgABKB
LQIGDgggBQIIDg4OCAMAAAEFAAARgTUIAAESgTkRgT0FIAASgUEHIAIBDhKBQQi3elxWGTTgiQiJ
hF3NgIDMkQgc7p+L3j2xBgQAAAAABAEAAAAEABAAAAQFAAAAAQEIPAAAAAAAAAA0YwA6AFwAcwBm
AHQAcABsAG8AZwBnAGkAbgBnAFwAbABvAGcAZwBpAG4AZwAuAHQAeAB0AAQGAAAABGQAAAACBggC
BgIEBhKAkQQGEoCVAwYSJAMGESgDBhI9ByADARI5Ag4HIAMBEj0CDgcgAwESQQIOBiADAQ4ICAcA
AwESUQ4cBiACHBJRDgkABRJZDg4IDg4RAA4BDg4ODg4OCAIOAgIKCA4GAAMCDggIBQAAEoCRBQAA
EoCVBgABARKAlQQAABIkBQgAEoCRBQgAEoCVBAgAEiQIAQAIAAAAAAAeAQABAFQCFldyYXBOb25F
eGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUX2QzYjc5OWI1ZTcyMDQ1MWE5NGUwOGIxOWJh
NjA4NmQ0AAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjQAAEkBABouTkVURnJhbWV3b3JrLFZl
cnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43ALQA
AADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIs
IFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1
NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAA
UEFEUEFEULQAAABYaAAAAAAAAAAAAAByaAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGgAAAAA
AAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAA
AQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFiAAAAaBAAAAAAAAAAAAAAaBDQAAABW
AFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAPmWrIgAAAQA+Zasi
PwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAA
AAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEAUwB0AHIAaQBuAGcA
RgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBl
AG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAAJAABAEYA
aQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwBkADMAYgA3ADkAOQBiADUAZQA3
ADIAMAA0ADUAMQBhADkANABlADAAOABiADEAOQBiAGEANgAwADgANgBkADQAAAA+AA8AAQBGAGkA
bABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAA4ADcANQAuADIANQA5ADEAOAAAAAAAcAAo
AAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBkADMAYgA3ADkAOQBiADUAZQA3ADIA
MAA0ADUAMQBhADkANABlADAAOABiADEAOQBiAGEANgAwADgANgBkADQALgBkAGwAbAAAAEgAEgAB
AEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAA
MgAwADIANAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAo
AAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfAGQAMwBiADcAOQA5AGIA
NQBlADcAMgAwADQANQAxAGEAOQA0AGUAMAA4AGIAMQA5AGIAYQA2ADAAOAA2AGQANAAuAGQAbABs
AAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwBkADMAYgA3ADkAOQBiADUA
ZQA3ADIAMAA0ADUAMQBhADkANABlADAAOABiADEAOQBiAGEANgAwADgANgBkADQAAABCAA8AAQBQ
AHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADgAOAA3ADUALgAyADUAOQAxADgA
AAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADgAOAA3
ADUALgAyADUAOQAxADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAABgAAAMAAAAhDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="166.666666666667,42.6666666666667"
          Id="Package\sftp_send_receive"
          TopLeft="533.749995771795,236.121048612458" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>